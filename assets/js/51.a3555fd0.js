(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{473:function(e,t,n){"use strict";n.r(t);var o=n(2),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),n("p",[e._v("本文介绍如何使用"),n("code",[e._v("vue-class-component")]),e._v("来编写组件")]),e._v(" "),n("h2",{attrs:{id:"类组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类组件"}},[e._v("#")]),e._v(" 类组件")]),e._v(" "),n("p",[e._v("使用"),n("code",[e._v("@Component")]),e._v("装饰vue类组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport Component from 'vue-class-component'\n\n// HelloWorld class will be a Vue component\n@Component\nexport default class HelloWorld extends Vue {}\n")])])]),n("h3",{attrs:{id:"data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[e._v("#")]),e._v(" Data")]),e._v(" "),n("p",[e._v("初始数据可以写成类属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <div>{{ message }}</div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component\nexport default class HelloWorld extends Vue {\n  // Declared as component data\n  message = 'Hello World!'\n}\n<\/script>\n")])])]),n("blockquote",[n("p",[e._v("注意，如果初始值为"),n("code",[e._v("undefined")]),e._v("，类属性将不会响应，这意味着属性的变化将不会被检测到,为了避免这种情况，初始值可以设置成"),n("code",[e._v("null")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component\nexport default class HelloWorld extends Vue {\n  // `message` will be reactive with `null` value\n  message = null\n\n  data() {\n    return {\n      // 如果通过`data hook`设置的值为undefined，那么值是动态的\n      hello: undefined\n    }\n  }\n}\n")])])]),n("h3",{attrs:{id:"方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),n("p",[e._v("组件方法可以直接声明为类原型方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <button v-on:click=\"hello\">Click</button>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component\nexport default class HelloWorld extends Vue {\n  // Declared as component method\n  hello() {\n    console.log('Hello World!')\n  }\n}\n<\/script>\n")])])]),n("h3",{attrs:{id:"计算属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算属性"}},[e._v("#")]),e._v(" 计算属性")]),e._v(" "),n("p",[e._v("计算属性可以声明为类属性getter / setter")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <input v-model=\"name\">\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component\nexport default class HelloWorld extends Vue {\n  firstName = 'John'\n  lastName = 'Doe'\n\n  // Declared as computed property getter\n  get name() {\n    return this.firstName + ' ' + this.lastName\n  }\n\n  // Declared as computed property setter\n  set name(value) {\n    const splitted = value.split(' ')\n    this.firstName = splitted[0]\n    this.lastName = splitted[1] || ''\n  }\n}\n<\/script>\n")])])]),n("h3",{attrs:{id:"hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[e._v("#")]),e._v(" Hooks")]),e._v(" "),n("p",[e._v("data、render和所有Vue生命周期钩子也可以直接声明为类原型方法，但是不能在实例本身上调用它们。在声明自定义方法时，应该避免使用这些保留名。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component\nexport default class HelloWorld extends Vue {\n  // Declare mounted lifecycle hook\n  mounted() {\n    console.log('mounted')\n  }\n\n  // Declare render function\n  render() {\n    return <div>Hello World!</div>\n  }\n}\n")])])]),n("h3",{attrs:{id:"其他选项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他选项"}},[e._v("#")]),e._v(" 其他选项")]),e._v(" "),n("p",[e._v("除了上面的选项，所有其他的选项通过装饰器"),n("code",[e._v("@Component")]),e._v("传入")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <OtherComponent />\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\nimport OtherComponent from './OtherComponent.vue'\n\n@Component({\n  // Specify `components` option.\n  // See Vue.js docs for all available options:\n  // https://vuejs.org/v2/api/#Options-Data\n  components: {\n    OtherComponent\n  }\n})\nexport default class HelloWorld extends Vue {}\n<\/script>\n")])])]),n("h2",{attrs:{id:"额外的hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#额外的hooks"}},[e._v("#")]),e._v(" 额外的Hooks")]),e._v(" "),n("p",[e._v("如果你使用一些Vue插件(如Vue Router)，您可能需要类组件来解析它们提供的钩子。在这种情况下，"),n("code",[e._v("Component.registerhook")]),e._v("允许您注册这样的钩子:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// class-component-hooks.js\nimport Component from 'vue-class-component'\n\n// Register the router hooks with their names\nComponent.registerHooks([\n  'beforeRouteEnter',\n  'beforeRouteLeave',\n  'beforeRouteUpdate'\n])\n")])])]),n("p",[e._v("注册了钩子后，类组件将其实现为类原型方法:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component\nexport default class HelloWorld extends Vue {\n  // The class component now treats beforeRouteEnter,\n  // beforeRouteUpdate and beforeRouteLeave as Vue Router hooks\n  beforeRouteEnter(to, from, next) {\n    console.log('beforeRouteEnter')\n    next()\n  }\n\n  beforeRouteUpdate(to, from, next) {\n    console.log('beforeRouteUpdate')\n    next()\n  }\n\n  beforeRouteLeave(to, from, next) {\n    console.log('beforeRouteLeave')\n    next()\n  }\n}\n")])])]),n("p",[e._v("建议在单独的文件中编写此注册代码，因为您必须在任何组件定义之前注册它们。你可以通过将钩子注册的import语句放在主文件的顶部来确保执行顺序:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// main.js\n\n// Make sure to register before importing any components\nimport './class-component-hooks'\n\nimport Vue from 'vue'\nimport App from './App'\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n})\n")])])]),n("h2",{attrs:{id:"自定义装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义装饰器"}},[e._v("#")]),e._v(" 自定义装饰器")]),e._v(" "),n("p",[e._v("您可以通过创建自己的decorator来扩展此库的功能。Vue类组件提供了"),n("code",[e._v("createDecorator")]),e._v("方法来创建自定义decorator。"),n("code",[e._v("createDecorator")]),e._v("期望一个回调函数作为第一个参数，这个回调函数将收到以下参数:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(": Vue组件选项对象。此对象的更改将影响所提供的组件。")]),e._v(" "),n("li",[n("code",[e._v("key")]),e._v(": 应用decorator的属性或方法键。")]),e._v(" "),n("li",[n("code",[e._v("parameterIndex")]),e._v(": The index of a decorated argument if the custom decorator is used for an argument.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// decorators.js\nimport { createDecorator } from 'vue-class-component'\n\n// 声明 Log 装饰器.\nexport const Log = createDecorator((options, key) => {\n  // 保留原来的方法供以后使用。\n  const originalMethod = options.methods[key]\n\n  // 为原方法包裹一层，添加自己的逻辑\n  options.methods[key] = function wrapperMethod(...args) {\n    // Print a log.\n    console.log(`Invoked: ${key}(`, ...args, ')')\n\n    // Invoke the original method.\n    originalMethod.apply(this, args)\n  }\n})\n")])])]),n("p",[e._v("使用它作为方法装饰器:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport Component from 'vue-class-component'\nimport { Log } from './decorators'\n\n@Component\nclass MyComp extends Vue {\n  // It prints a log when `hello` method is invoked.\n  @Log\n  hello(value) {\n    // ...\n  }\n}\n")])])]),n("h2",{attrs:{id:"未完待续"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#未完待续"}},[e._v("#")]),e._v(" 未完待续")])])}),[],!1,null,null,null);t.default=a.exports}}]);