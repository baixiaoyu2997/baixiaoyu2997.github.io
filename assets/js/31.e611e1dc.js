(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{462:function(s,a,t){"use strict";t.r(a);var e=t(2),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[s._v("#")]),s._v(" Shell")]),s._v(" "),t("h3",{attrs:{id:"shell是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell是什么"}},[s._v("#")]),s._v(" Shell是什么？")]),s._v(" "),t("p",[s._v("Shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务, Shell脚本（shell script），是一种为Shell编写的脚本程序。我们经常说的shell通常都是指shell脚本。")]),s._v(" "),t("h3",{attrs:{id:"shell和base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell和base"}},[s._v("#")]),s._v(" Shell和Base")]),s._v(" "),t("p",[s._v("sh: Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh")]),s._v(" "),t("p",[s._v("bash: Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash")]),s._v(" "),t("h3",{attrs:{id:"指定解释器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定解释器"}},[s._v("#")]),s._v(" 指定解释器")]),s._v(" "),t("p",[s._v("shell的第一行代码通常是"),t("code",[s._v("#!/usr/bin/env bash")]),s._v("\t,"),t("code",[s._v("#!")]),s._v("是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行 /env 是系统的PATH目录中查找")]),s._v(" "),t("h3",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),t("p",[s._v("定义变量时，"),t("code",[s._v("=")]),s._v("号前后不能有空格："),t("code",[s._v("my_name='jack'")]),s._v(",可以用单引号，也可以用双引号。")]),s._v(" "),t("p",[s._v("单引号字符串的限制：")]),s._v(" "),t("ul",[t("li",[s._v("单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的")]),s._v(" "),t("li",[s._v("单引号字串中不能出现单引号（对单引号使用转义符后也不行）")])]),s._v(" "),t("p",[s._v("双引号：")]),s._v(" "),t("ul",[t("li",[s._v("双引号里可以有变量")]),s._v(" "),t("li",[s._v("双引号里可以出现转义字符")])]),s._v(" "),t("h4",{attrs:{id:"使用已经定义过的变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用已经定义过的变量"}},[s._v("#")]),s._v(" 使用已经定义过的变量")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$my_name")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${my_name}")]),s._v("\n")])])]),t("p",[s._v("变量名外面的花括号是可选的，加不加都行,建议使用第二种形式")]),s._v(" "),t("h4",{attrs:{id:"变量加双引号问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量加双引号问题"}},[s._v("#")]),s._v(" 变量加双引号问题")]),s._v(" "),t("p",[s._v("大多数时候，虽然可以不使用括起字符串和字符串变量的双引号，但这并不是好主意。为什么呢？因为如果环境变量中恰巧有一个空格或制表键，bash 将无法分辨，从而无法正常工作。这里有一个错误的比较示例：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myvar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo bar oni"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yes"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),t("p",[s._v('如果 myvar 等于 "foo"，则代码将按预想工作，不进行打印。但是，如果 myvar 等于 "foo bar oni"，则代码将因以下错误失败：'),t("code",[s._v("[: too many arguments")])]),s._v(" "),t("p",[s._v('在这种情况下，"$myvar"（等于 "foo bar oni"）中的空格迷惑了 bash。bash 扩展 "$myvar" 之后，代码如下：')]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" foo bar oni "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo bar oni"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("因为环境变量没放在双引号中，所以 bash 认为方括号中的自变量过多。可以用双引号将字符串自变量括起来消除该问题。请记住，如果养成将所有字符串自变量用双引号括起的习惯，将除去很多类似的编程错误。")]),s._v(" "),t("h3",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),t("ol",[t("li",[s._v("获取字符串长度："),t("code",[s._v("echo ${#my_name}")])]),s._v(" "),t("li",[s._v("截取字符串: "),t("code",[s._v("echo ${my_name:0:2}")])])]),s._v(" "),t("h3",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),t("p",[s._v("shell中使用"),t("code",[s._v("()")]),s._v("来表述数组，数组元素用空格分割："),t("code",[s._v("name=(name1 name2 name3)")]),s._v(",还可以通过索引来设置数组成员：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#可以不使用连续的下标，而且下标的范围没有限制")]),s._v("\nary"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("name1\nary"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("name2\nary"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("name3\n")])])]),t("h4",{attrs:{id:"使用数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用数组"}},[s._v("#")]),s._v(" 使用数组")]),s._v(" "),t("p",[s._v("可以通过"),t("code",[s._v("${array[下标]}")]),s._v("来使用，使用"),t("code",[s._v("@")]),s._v("获取所有数组元素："),t("code",[s._v("${name[@]}")])]),s._v(" "),t("h4",{attrs:{id:"获取数组长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取数组长度"}},[s._v("#")]),s._v(" 获取数组长度")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得数组元素的个数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("length")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$length")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或者")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("length")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("*"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$length")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取得数组单个元素的长度")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("lengthn")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$length")]),s._v("\n\n")])])]),t("h3",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),t("p",[s._v("以"),t("code",[s._v("#")]),s._v("开头便是注释，shell没有多行注释，只能每一行都加"),t("code",[s._v("#")])]),s._v(" "),t("h3",{attrs:{id:"for循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[s._v("#")]),s._v(" for循环")]),s._v(" "),t("h4",{attrs:{id:"第一种写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一种写法"}},[s._v("#")]),s._v(" 第一种写法")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" test_"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${i}")]),s._v(".txt\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shell很简单"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" test_"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${i}")]),s._v(".txt\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("h4",{attrs:{id:"第二种写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二种写法"}},[s._v("#")]),s._v(" 第二种写法")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("index")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"index="')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$index")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),t("h3",{attrs:{id:"if-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-else"}},[s._v("#")]),s._v(" if  else")]),s._v(" "),t("ul",[t("li",[s._v("if else写法")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("b")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# if与[ ]有空格，"["  、 "]"与字符都有空格')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a is equal to b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a is not equal to b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),t("ul",[t("li",[s._v("if … elif … fi 语句可以对多个条件进行判断")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("b")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a is equal to b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" -gt "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a is greater than b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" -lt "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a is less than b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"None of the condition met"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),t("p",[s._v("常用判断：\n-e 文件是否存在")]),s._v(" "),t("p",[s._v("-f  文件是否是普通文件（不是目录、设备文件、链接文件）")]),s._v(" "),t("p",[s._v("-s  表示文件大小不为0")]),s._v(" "),t("p",[s._v("-d 表示文件是否是目录")]),s._v(" "),t("p",[s._v("-b 表示是块设备（光驱、软盘等）")]),s._v(" "),t("p",[s._v("-c  表示是字符设备（键盘、声卡等）")]),s._v(" "),t("p",[s._v("-p 表示是管道")]),s._v(" "),t("p",[s._v("-h 表示是符号链接")]),s._v(" "),t("p",[s._v("-S 表示是否是socket\n-n 如果判断的string长度不为0则为真\n-r、-w、-x表示文件是否有可读、可写、可执行权限（指运行这个测试命令的用户）")]),s._v(" "),t("p",[s._v("f1 -nt f2      f1是否比f2新（new than）")]),s._v(" "),t("p",[s._v("f1 -ot f2      f1是否比f2旧（old than）")]),s._v(" "),t("p",[s._v("f1 -ef f2      f1和f2是否是相同文件的硬链接")]),s._v(" "),t("h3",{attrs:{id:"while-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while-语句"}},[s._v("#")]),s._v(" while 语句")]),s._v(" "),t("p",[s._v("while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v(" $int"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$int")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"int++"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),t("h3",{attrs:{id:"特殊符号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊符号"}},[s._v("#")]),s._v(" 特殊符号")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("<")]),s._v("表示输入重定向")]),s._v(" "),t("li",[t("code",[s._v(">")]),s._v("表示输出重定向")])]),s._v(" "),t("h3",{attrs:{id:"shell结合系统命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell结合系统命令"}},[s._v("#")]),s._v(" Shell结合系统命令")]),s._v(" "),t("p",[s._v("sh脚本结合系统命令便有了强大的威力，在字符处理领域，有grep、awk、sed三剑客，grep负责找出特定的行，awk能将行拆分成多个字段，sed则可以实现更新插入删除等写操作。")]),s._v(" "),t("h3",{attrs:{id:"脚本暂停"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚本暂停"}},[s._v("#")]),s._v(" 脚本暂停")]),s._v(" "),t("p",[t("code",[s._v('read -p "Press any key to continue." var')])]),s._v(" "),t("h3",{attrs:{id:"shell传递参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell传递参数"}},[s._v("#")]),s._v(" Shell传递参数")]),s._v(" "),t("ul",[t("li",[s._v("脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推,其中 $0 为执行的文件名")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("deploy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sh first\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// deploy.sh")]),s._v("\n$"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("first\n")])])]),t("h3",{attrs:{id:"管道符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管道符"}},[s._v("#")]),s._v(" "),t("code",[s._v("|")]),s._v("管道符")]),s._v(" "),t("p",[s._v("管道符用来把上一个指令的正确结果传递给下一个指令做为输入")]),s._v(" "),t("h2",{attrs:{id:"windows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[s._v("#")]),s._v(" windows")]),s._v(" "),t("ol",[t("li",[s._v("删除文件夹 rd /S /Q <文件夹>")])]),s._v(" "),t("h3",{attrs:{id:"查询占用指定端口进程的pid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询占用指定端口进程的pid"}},[s._v("#")]),s._v(" 查询占用指定端口进程的PID")]),s._v(" "),t("h4",{attrs:{id:"window"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#window"}},[s._v("#")]),s._v(" window")]),s._v(" "),t("p",[s._v("打开cmd命令行，输入netstat -ano|findstr 8080(指定端口号)")]),s._v(" "),t("p",[s._v("最后一列即为占用该端口的进程的PID")]),s._v(" "),t("h4",{attrs:{id:"mac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mac"}},[s._v("#")]),s._v(" mac")]),s._v(" "),t("p",[t("code",[s._v("lsof -i:3000")])]),s._v(" "),t("h3",{attrs:{id:"kill指定pid的进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kill指定pid的进程"}},[s._v("#")]),s._v(" KILL指定PID的进程")]),s._v(" "),t("p",[s._v("紧接着在命令行输入taskkill /pid 21172（PID参数） -f")]),s._v(" "),t("h3",{attrs:{id:"脚本退出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚本退出"}},[s._v("#")]),s._v(" 脚本退出")]),s._v(" "),t("p",[t("code",[s._v("exit 1")]),s._v(",可以是0~255的数字")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("0----------------命令运行成功\n1----------------通知未知错误\n2----------------误用shell命令\n126-------------命令不可执行\n127-------------没有找到命令\n128-------------无效退出参数\n128+x-----------linux信号x的严重错误\n130--------------命令通过Ctrl+C终止\n255--------------退出状态码越界\n")])])]),t("h2",{attrs:{id:"查看文件夹列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看文件夹列表"}},[s._v("#")]),s._v(" 查看文件夹列表")]),s._v(" "),t("p",[t("code",[s._v("ls")]),s._v("，参数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("-a")]),s._v("，查看包括隐藏文件夹")])])])}),[],!1,null,null,null);a.default=r.exports}}]);