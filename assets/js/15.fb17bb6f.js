(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{312:function(t,v,_){"use strict";_.r(v);var i=_(1),d=Object(i.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("指令")]),t._v(" "),_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("介绍")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("查看分支列表")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("分支名")]),t._v(" "),_("td",[t._v("创建分支")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("-b")]),t._v(" "),_("td",[t._v("创建并切换到新建的分支上")])]),t._v(" "),_("tr",[_("td",[t._v("git brabch")]),t._v(" "),_("td",[t._v("-b 分支名 origin/分支名")]),t._v(" "),_("td",[t._v("创建远程分支到本地")])]),t._v(" "),_("tr",[_("td",[t._v("git brabch")]),t._v(" "),_("td",[t._v("-d 分支名")]),t._v(" "),_("td",[t._v("删除本地分支")])]),t._v(" "),_("tr",[_("td",[t._v("git brabch")]),t._v(" "),_("td",[t._v("-D 分支名")]),t._v(" "),_("td",[t._v("强行删除本地分支")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("origin :分支名")]),t._v(" "),_("td",[t._v("删除远处仓库分支")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("-v")]),t._v(" "),_("td",[t._v("查看所有分支的最后一次操作")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("-vv")]),t._v(" "),_("td",[t._v("查看当前分支")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("--no-merged")]),t._v(" "),_("td",[t._v("查看未与当前分支合并的分支")])]),t._v(" "),_("tr",[_("td",[t._v("git branch")]),t._v(" "),_("td",[t._v("--merged")]),t._v(" "),_("td",[t._v("查看别的分支和当前分支合并过的分支")])]),t._v(" "),_("tr",[_("td",[t._v("git merge")]),t._v(" "),_("td",[t._v("分支名")]),t._v(" "),_("td",[t._v("合并分支到当前分支上")])]),t._v(" "),_("tr",[_("td",[t._v("git checkout")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("切换分支")])])])]),t._v(" "),_("h2",{attrs:{id:"暂存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#暂存","aria-hidden":"true"}},[t._v("#")]),t._v(" 暂存")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("指令")]),t._v(" "),_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("介绍")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("git stash")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("暂存当前修改")])]),t._v(" "),_("tr",[_("td",[t._v("git stash")]),t._v(" "),_("td",[t._v("apply")]),t._v(" "),_("td",[t._v("恢复最近的一次暂存")])]),t._v(" "),_("tr",[_("td",[t._v("git stash")]),t._v(" "),_("td",[t._v("pop")]),t._v(" "),_("td",[t._v("恢复暂存并删除暂存记录")])]),t._v(" "),_("tr",[_("td",[t._v("git stash")]),t._v(" "),_("td",[t._v("list")]),t._v(" "),_("td",[t._v("查看暂存列表")])]),t._v(" "),_("tr",[_("td",[t._v("git stash")]),t._v(" "),_("td",[t._v("drop")]),t._v(" "),_("td",[t._v("暂存名(例：stash@{0}) 移除某次暂存")])]),t._v(" "),_("tr",[_("td",[t._v("git stash")]),t._v(" "),_("td",[t._v("clear")]),t._v(" "),_("td",[t._v("清除暂存")])])])]),t._v(" "),_("h2",{attrs:{id:"回退"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#回退","aria-hidden":"true"}},[t._v("#")]),t._v(" 回退")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("指令")]),t._v(" "),_("th",[t._v("参数")]),t._v(" "),_("th",[t._v("介绍")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("git reset")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("回退")])]),t._v(" "),_("tr",[_("td",[t._v("git reset")]),t._v(" "),_("td",[t._v("--hard HEAD^")]),t._v(" "),_("td",[t._v("回退到上一个版本")])]),t._v(" "),_("tr",[_("td",[t._v("git reset")]),t._v(" "),_("td",[t._v("--hard ahdhs1(commit_id)")]),t._v(" "),_("td",[t._v("回退到某个版本")])]),t._v(" "),_("tr",[_("td",[t._v("git checkout")]),t._v(" "),_("td",[t._v("-- file 撤销修改的文件")]),t._v(" "),_("td",[t._v("如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态")])]),t._v(" "),_("tr",[_("td",[t._v("git reset")]),t._v(" "),_("td",[t._v("HEAD file")]),t._v(" "),_("td",[t._v("撤回暂存区的文件修改到工作区")])]),t._v(" "),_("tr",[_("td",[t._v("git reset --hard && git clean -df")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("工作目录和缓存区回到最近一次commit的状态")])])])]),t._v(" "),_("p",[t._v("删除远程分支：git push origin :分支名称"),_("br"),t._v("\n删除分支：git branch -d <branch_name>\n强制push : git push -u origin master -f"),_("br"),t._v("\n恢复到本地分支的原来版本 git reflog master  (查看本地master分支历史变动纪录) git reset --hard <COMMIT_ID> （恢复到之前位置）")]),t._v(" "),_("p",[t._v("将某一文件夹提交到github某分支 git subtree push --prefix=【www】 origin 【gh-pages】")]),t._v(" "),_("p",[t._v("在已有代码情况下推送到github：")]),t._v(" "),_("ol",[_("li",[t._v("git remote add origin git@github.com:baixiaoyu2997/xxxx.git")]),t._v(" "),_("li",[t._v("git pull origin master --allow-unrelated-histories")]),t._v(" "),_("li",[t._v("git push origin master")])]),t._v(" "),_("p",[t._v("撤销上次提交：先[强制回退]，然后git push origin HEAD --force")]),t._v(" "),_("p",[t._v('add+commit简写方式：git commit -am"message"')]),t._v(" "),_("p",[t._v('附注标签: git tag -a v0.1.0 -m "v0.1.0"')]),t._v(" "),_("p",[t._v("添加tag到github: git push origin [tagName]")]),t._v(" "),_("p",[t._v("添加所有tag到github: git push origin --tags")]),t._v(" "),_("p",[t._v("删除tag: git tag -d [tagName]")]),t._v(" "),_("p",[t._v("删除远程tag: git push origin --delete tag [tagName]")]),t._v(" "),_("p",[t._v("删除没有被追踪的文件")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git clean -f")])]),t._v(" "),_("li",[_("code",[t._v("git clean -n")]),t._v(" 是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒")]),t._v(" "),_("li",[_("code",[t._v("git clean -df")]),t._v(' 删除当前目录下没有被track过的文件和文件夹\n修改最后一次commit信息:git commit --amend => c(进入vim编辑器) => ZZ(保存并退出)\ngit commit --amend -m "xxx"')])]),t._v(" "),_("p",[t._v("git查询远程分支:git branch -a (加上-a参数可以查看远程分支，远程分支会用红色表示出来)\n恢复储藏时保留状态:git stash apply –index")])])},[],!1,null,null,null);v.default=d.exports}}]);