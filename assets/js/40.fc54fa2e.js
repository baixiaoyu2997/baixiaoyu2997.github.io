(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{306:function(t,r,e){"use strict";e.r(r);var a=e(1),n=Object(a.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("标题参考"),e("a",{attrs:{href:"https://roadmap.sh/frontend",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端技能路线系列"),e("OutboundLink")],1),e("br"),t._v("\n副标题参考 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),e("OutboundLink")],1),e("br"),t._v("\n文章内容来源 "),e("a",{attrs:{href:"https://juejin.im/post/5dafa3d35188257b1549bad1#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("表现"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 规范")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://drafts.csswg.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSSWG"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("CSS Working Group Editor Drafts 承担主要的 CSS 规范开发工作")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("a",{attrs:{href:"https://drafts.fxtf.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("FX Task Force"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("FX Task Force Editor Drafts 主要是一些图形图像方面的规范，比如遮罩、滤镜")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("a",{attrs:{href:"https://drafts.css-houdini.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Houdini"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("CSS 新方向，浏览器暴露出更多 API，使 CSS 可以控制更多底层的东西，目前主要是 Chrome 团队在主导。")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("a",{attrs:{href:"https://www.w3.org/Style/CSS/",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3c css"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("caniuse"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote"),t._v(" "),e("h2",{attrs:{id:"伪类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#伪类","aria-hidden":"true"}},[t._v("#")]),t._v(" 伪类")]),t._v(" "),e("p",[t._v("伪类用于在页面中的元素处于某个状态时，为其添加指定的样式。"),e("br"),t._v("\n最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。")]),t._v(" "),e("h2",{attrs:{id:"伪元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#伪元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 伪元素")]),t._v(" "),e("p",[t._v("伪元素会创建一个抽象的伪元素，这个元素不是DOM中的真实元素，但是会存在于最终的渲染树中，我们可以为其添加样式。")]),t._v(" "),e("h3",{attrs:{id:"line-height"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#line-height","aria-hidden":"true"}},[t._v("#")]),t._v(" line-height")]),t._v(" "),e("p",[t._v("line-heihgt取值的区别（100%、1em、1）：")]),t._v(" "),e("ol",[e("li",[t._v("百分比和em根据当前元素font-size进行计算")]),t._v(" "),e("li",[t._v("值为数字时，根据子元素的font-size进行计算")])]),t._v(" "),e("h2",{attrs:{id:"grid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grid","aria-hidden":"true"}},[t._v("#")]),t._v(" Grid")]),t._v(" "),e("blockquote",[e("p",[t._v("注意，设为网格布局以后，容器子元素（项目）的flot、display:inline-block、display:table-cell、vertical-align和column-*等设置都将失效。")])]),t._v(" "),e("h2",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),e("p",[t._v("元素全屏后，弹窗元素不能显示？")]),t._v(" "),e("ul",[e("li",[t._v("原因："),e("br"),t._v("\n使用elementUI时"),e("code",[t._v("notify")]),t._v("组件无法在全屏中显示出来，因为notify渲染在body下，全屏元素不与notify在同一层级下，如果notify组件为全屏元素的子元素，那么就会正常显示了。")]),t._v(" "),e("li",[t._v("解决思路：\n"),e("ul",[e("li",[t._v("把弹窗元素移到全屏元素下。")]),t._v(" "),e("li",[t._v("把body全屏，把之前的全屏元素设置为：")])])])]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".fullscreen")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fixed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("right")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("bottom")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("left")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" black"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("区分伪类和伪元素？")]),t._v(" "),e("ul",[e("li",[t._v("最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。")]),t._v(" "),e("li",[t._v("可以通过"),e("code",[t._v(":")]),t._v("和"),e("code",[t._v("::")]),t._v("来区分，，"),e("code",[t._v(":")]),t._v("表示伪类，"),e("code",[t._v("::")]),t._v("表示伪元素")])])])},[],!1,null,null,null);r.default=n.exports}}]);