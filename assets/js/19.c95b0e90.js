(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{450:function(t,a,e){"use strict";e.r(a);var v=e(2),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"docker-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么"}},[t._v("#")]),t._v(" Docker 是什么？")]),t._v(" "),e("p",[t._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。由"),e("code",[t._v("golang")]),t._v("编写。")]),t._v(" "),e("p",[t._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),t._v(" "),e("p",[t._v("总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")]),t._v(" "),e("h2",{attrs:{id:"为什么要用-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-docker"}},[t._v("#")]),t._v(" 为什么要用 docker？")]),t._v(" "),e("p",[t._v("用户计算机的环境都不相同，软件必须保证两件事：操作系统的设置，各种库和组件的安装，只有它们都正确，软件才能运行。"),e("br"),t._v("\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时，所以产生了 docker。")]),t._v(" "),e("ol",[e("li",[t._v("环境统一")]),t._v(" "),e("li",[t._v("环境隔离")]),t._v(" "),e("li",[t._v("便于回滚")]),t._v(" "),e("li",[t._v("创建销毁容器高效")])]),t._v(" "),e("h2",{attrs:{id:"docker-中的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-中的概念"}},[t._v("#")]),t._v(" docker 中的概念")]),t._v(" "),e("h3",{attrs:{id:"registry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#registry"}},[t._v("#")]),t._v(" Registry")]),t._v(" "),e("p",[t._v("镜像仓库，存储大量镜像，可以从镜像仓库拉取和推送镜像。")]),t._v(" "),e("h3",{attrs:{id:"docker-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像"}},[t._v("#")]),t._v(" Docker 镜像")]),t._v(" "),e("p",[t._v("类似虚拟机快照，从仓库拉取，或者在现有工具镜像上创建新镜像。通过镜像可以启动容器。"),e("br"),t._v("\n关于镜像的一些概念：")]),t._v(" "),e("ul",[e("li",[t._v("虚悬镜像：强制删除一个已经运行容器的镜像，或者使用 docker pull 命令更新镜像时，镜像的名称和标签会转移到新镜像中，旧的镜像就会变成虚悬镜像，另外，在使用 docker build 构建镜像的时候，如果构建失败也会产生虚悬镜像。一般来说虚悬镜像已经没有实际用处，可以随意删除。")])]),t._v(" "),e("h4",{attrs:{id:"寻找镜像流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#寻找镜像流程"}},[t._v("#")]),t._v(" 寻找镜像流程")]),t._v(" "),e("ol",[e("li",[t._v("现在本地寻找")]),t._v(" "),e("li",[t._v("有的话使用，没有去docker hub上下载")]),t._v(" "),e("li",[t._v("docker hub能否找到，如果没有返回错误")]),t._v(" "),e("li",[t._v("docker hub能找到，下载这个镜像")])]),t._v(" "),e("h4",{attrs:{id:"联合文件系统-unionfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联合文件系统-unionfs"}},[t._v("#")]),t._v(" 联合文件系统（UnionFS）")]),t._v(" "),e("p",[t._v("docker镜像上系上由一层一层的文件系统组成，这种层级的文件系统称为UnionFs")]),t._v(" "),e("h3",{attrs:{id:"docker-容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器"}},[t._v("#")]),t._v(" Docker 容器")]),t._v(" "),e("p",[t._v("从镜像中创建应用环境，以单进程的方式运行。对外公开服务。是一种短暂的和一次性的环境。")]),t._v(" "),e("h3",{attrs:{id:"docker-数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-数据卷"}},[t._v("#")]),t._v(" Docker 数据卷")]),t._v(" "),e("p",[t._v("数据卷可以完成数据持久化和同步操作，数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：")]),t._v(" "),e("ul",[e("li",[t._v("数据卷可以在容器之间共享和重用")]),t._v(" "),e("li",[t._v("对数据卷的修改会立马生效")]),t._v(" "),e("li",[t._v("对数据卷的更新，不会影响镜像")]),t._v(" "),e("li",[t._v("卷会一直存在，直到没有容器使用")]),t._v(" "),e("li",[t._v("删除容器，本地数据不会丢失")])]),t._v(" "),e("h3",{attrs:{id:"docker-网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络"}},[t._v("#")]),t._v(" Docker 网络")]),t._v(" "),e("p",[t._v("Docker 容器之间的网络交互，可以使用端口映射的方式，其他容器可以直接通过端口实现。除该方式外还有一个容器连接（linking）系统也可以达到容器交互。（本文中 node 连接 mongodb 使用的是端口映射的方式）")]),t._v(" "),e("h3",{attrs:{id:"host-宿主机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#host-宿主机"}},[t._v("#")]),t._v(" Host 宿主机")]),t._v(" "),e("p",[t._v("指的是当前使用的真实操作系统")]),t._v(" "),e("h3",{attrs:{id:"linux上安装docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux上安装docker"}},[t._v("#")]),t._v(" Linux上安装docker")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("卸载旧的版本:"),e("code",[t._v("yum remove docker")])])]),t._v(" "),e("li",[e("p",[t._v("需要的依赖："),e("code",[t._v("yum install -y yum-utils")])])]),t._v(" "),e("li",[e("p",[t._v("设置镜像的仓库")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("yum-config-manager "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\t--add-repo "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n\thttps://download.docker.com/linux/centosdpcker-ce.repo "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认是国外的地址 ")]),t._v("\n\thttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#推荐使用阿里云的")]),t._v("\n\n")])])])]),t._v(" "),e("li",[e("p",[t._v("更新yum软件包索引："),e("code",[t._v("yum makecache fast")])])]),t._v(" "),e("li",[e("p",[t._v("安装docker："),e("code",[t._v("yum install docker-ce docker-ce-cli containerd.io")])])]),t._v(" "),e("li",[e("p",[t._v("启动docker："),e("code",[t._v("systemctl start docker")])])]),t._v(" "),e("li",[e("p",[t._v("使用"),e("code",[t._v("docker version")]),t._v("测试是否安装成功")])]),t._v(" "),e("li",[e("p",[t._v("测试docker运行："),e("code",[t._v("docker run hello-world")])])]),t._v(" "),e("li",[e("p",[t._v("查看下载的镜像："),e("code",[t._v("docker images")])])]),t._v(" "),e("li",[e("p",[t._v("了解，删除docker:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.卸载依赖")]),t._v("\nyum remove docker-ce docker-ce-cli containerd.io\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.删除目录")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/docker\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /var/lib/docker docker的默认工作路径")]),t._v("\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"docker-操作指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-操作指令"}},[t._v("#")]),t._v(" docker 操作指令")]),t._v(" "),e("h3",{attrs:{id:"attach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attach"}},[t._v("#")]),t._v(" attach")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("attach")]),t._v(" "),e("td",[t._v("进入容器，查看正在执行的终端。可以用来查看正在输出的日志")]),t._v(" "),e("td",[t._v("容器id")])])])]),t._v(" "),e("h3",{attrs:{id:"build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[t._v("#")]),t._v(" build")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("build")]),t._v(" "),e("td",[t._v("构建镜像,"),e("code",[t._v("docker build -t myimages .")]),t._v("。"),e("code",[t._v("-t")]),t._v("表示打包出来镜像的名字，和可选的"),e("code",[t._v("tag")]),t._v(",最后的"),e("code",[t._v(".")]),t._v("表示需要打包的目录。")]),t._v(" "),e("td",[t._v("-t name:tag")])]),t._v(" "),e("tr",[e("td",[t._v("build")]),t._v(" "),e("td",[e("code",[t._v("-f")]),t._v("表示指定dockerfile名称，默认"),e("code",[t._v("dockerfile")])]),t._v(" "),e("td",[t._v("-f name")])])])]),t._v(" "),e("h3",{attrs:{id:"container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[t._v("#")]),t._v(" container")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("container")]),t._v(" "),e("td",[t._v("清空所有已停止容器")]),t._v(" "),e("td",[t._v("prune")])])])]),t._v(" "),e("h3",{attrs:{id:"commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" commit")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("commit")]),t._v(" "),e("td",[t._v("提交容器成为一个新的副本")]),t._v(" "),e("td",[t._v("-m=“提交的描述信息  -a=“作者” 容器id 目标镜像名:[TAG]")])])])]),t._v(" "),e("h3",{attrs:{id:"cp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cp"}},[t._v("#")]),t._v(" cp")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("cp")]),t._v(" "),e("td",[t._v("拷贝容器中的文件到目的地主机路径")]),t._v(" "),e("td",[t._v("容器id:容器内路径 目的地主机路径")])])])]),t._v(" "),e("h3",{attrs:{id:"pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[t._v("#")]),t._v(" pull")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("pull")]),t._v(" "),e("td",[t._v("拉取镜像,此指令不需要登录")]),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("如果权限被拒绝，需要为docker.sock赋权限：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo chmod 666 /var/run/docker.sock\n")])])]),e("h3",{attrs:{id:"push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" push")]),t._v(" "),e("p",[t._v("推送镜像到远程仓库，需要本地镜像名等于"),e("code",[t._v("仓库名/镜像名")]),t._v("，不需要远程创建仓库也可推送")]),t._v(" "),e("h3",{attrs:{id:"history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("history")]),t._v(" "),e("td",[t._v("查看镜像构建过程")]),t._v(" "),e("td",[t._v("<镜像id>")])])])]),t._v(" "),e("h3",{attrs:{id:"info"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#info"}},[t._v("#")]),t._v(" info")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("info")]),t._v(" "),e("td",[t._v("docker信息")]),t._v(" "),e("td")])])]),t._v(" "),e("h3",{attrs:{id:"inspect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inspect"}},[t._v("#")]),t._v(" inspect")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("inspect")]),t._v(" "),e("td",[t._v("查看容器的元信息")]),t._v(" "),e("td",[t._v("容器id")])])])]),t._v(" "),e("h3",{attrs:{id:"images"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#images"}},[t._v("#")]),t._v(" images")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("images")]),t._v(" "),e("td",[t._v("查看当前所有本地镜像")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("images")]),t._v(" "),e("td",[t._v("查看当前所有本地镜像+中间层镜像")]),t._v(" "),e("td",[t._v("-a")])]),t._v(" "),e("tr",[e("td",[t._v("images")]),t._v(" "),e("td",[t._v("只显示镜像的id")]),t._v(" "),e("td",[t._v("-q")])]),t._v(" "),e("tr",[e("td",[t._v("rmi")]),t._v(" "),e("td",[t._v("删除镜像")]),t._v(" "),e("td",[e("code",[t._v("<image name>")])])]),t._v(" "),e("tr",[e("td",[t._v("rmi")]),t._v(" "),e("td",[t._v("强制删除镜像")]),t._v(" "),e("td",[t._v("-f "),e("code",[t._v("<image name>")])])]),t._v(" "),e("tr",[e("td",[t._v("rmi")]),t._v(" "),e("td",[t._v("删除所有镜像")]),t._v(" "),e("td",[t._v("-f $(docker images -aq)")])]),t._v(" "),e("tr",[e("td",[t._v("image")]),t._v(" "),e("td",[t._v("删除虚悬镜像")]),t._v(" "),e("td",[t._v("prune")])]),t._v(" "),e("tr",[e("td",[t._v("image")]),t._v(" "),e("td",[t._v("创建镜像，并定义镜像名")]),t._v(" "),e("td",[t._v("build -t <镜像名> <路径>")])])])]),t._v(" "),e("h3",{attrs:{id:"load"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#load"}},[t._v("#")]),t._v(" load")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("load")]),t._v(" "),e("td",[t._v("导入镜像")]),t._v(" "),e("td",[t._v("-i <镜像.tar>")])])])]),t._v(" "),e("h3",{attrs:{id:"logs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[t._v("#")]),t._v(" logs")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("logs")]),t._v(" "),e("td",[t._v("显示日志,t表示时间戳，f表示输出，tail表示条数")]),t._v(" "),e("td",[t._v("-tf --tail 10 <镜像id>")])])])]),t._v(" "),e("h3",{attrs:{id:"tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("修改镜像名称和标签,此操作会保留原镜像")]),t._v(" "),e("td",[t._v("<原镜像名：原标签> <镜像名：标签>")])])])]),t._v(" "),e("h3",{attrs:{id:"top"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[t._v("#")]),t._v(" top")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("top")]),t._v(" "),e("td",[t._v("查看容器中进程信息")]),t._v(" "),e("td",[t._v("容器id")])])])]),t._v(" "),e("h3",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[t._v("#")]),t._v(" run")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("run")]),t._v(" "),e("td",[t._v("新建并启动容器，设置容器名称,有多个参数存在时，一般镜像名保持在最后，除非后边跟命令。")]),t._v(" "),e("td",[t._v("--name <容器名> <镜像名>")])]),t._v(" "),e("tr",[e("td",[t._v("run")]),t._v(" "),e("td",[t._v("新建并启动容器，"),e("code",[t._v("-t")]),t._v("配置一个伪终端，并绑定到容器的输入上，"),e("code",[t._v("-i")]),t._v("能让容器的标准输入保持打开状态，"),e("code",[t._v("-d")]),t._v("则可以让容器在后台保持运行，这三个参数可以合并为"),e("code",[t._v("-dit")]),t._v("，其顺序没有影响")]),t._v(" "),e("td",[t._v("-dit <镜像名>")])]),t._v(" "),e("tr",[e("td",[t._v("run")]),t._v(" "),e("td",[t._v("容器停止后自动删除")]),t._v(" "),e("td",[t._v("--rm")])]),t._v(" "),e("tr",[e("td",[t._v("run")]),t._v(" "),e("td",[t._v("指定容器的端口，例如"),e("code",[t._v("-p 3344:8080")]),t._v(",前边的3344是主机的端口，8080是容器内部的端口")]),t._v(" "),e("td",[t._v("-p")])]),t._v(" "),e("tr",[e("td",[t._v("run")]),t._v(" "),e("td",[t._v("随机指定端口")]),t._v(" "),e("td",[t._v("-P")])]),t._v(" "),e("tr",[e("td",[t._v("run")]),t._v(" "),e("td",[t._v("指定环境变量，例如："),e("code",[t._v("docker run -e MYQSL_ROOT=my-secret-pw")])]),t._v(" "),e("td",[t._v("-e")])])])]),t._v(" "),e("h3",{attrs:{id:"ps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[t._v("#")]),t._v(" ps")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("ps")]),t._v(" "),e("td",[t._v("查看当前运行的容器")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("ps")]),t._v(" "),e("td",[t._v("查看所有容器")]),t._v(" "),e("td",[t._v("-a")])]),t._v(" "),e("tr",[e("td",[t._v("ps")]),t._v(" "),e("td",[t._v("显示最近创建的容器，"),e("code",[t._v("n")]),t._v("表示几个")]),t._v(" "),e("td",[t._v("-n=?")])])])]),t._v(" "),e("h3",{attrs:{id:"exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" exec")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("exec")]),t._v(" "),e("td",[t._v("进入容器并打开一个新的终端,如果只是想执行容器中的命令，可以不输入"),e("code",[t._v("bash")]),t._v("，替换成命令名，退出容器，输入"),e("code",[t._v("exit")]),t._v(",与attach区别是退出终端不会结束容器")]),t._v(" "),e("td",[t._v("-it <容器名字｜容器 id> bash")])])])]),t._v(" "),e("h3",{attrs:{id:"search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#search"}},[t._v("#")]),t._v(" search")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("search")]),t._v(" "),e("td",[t._v("查找镜像")]),t._v(" "),e("td",[t._v("<容器名>")])])])]),t._v(" "),e("h3",{attrs:{id:"save"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#save"}},[t._v("#")]),t._v(" save")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("save")]),t._v(" "),e("td",[t._v("导出镜像")]),t._v(" "),e("td",[t._v("-o <输出文件名.tar> <待导出镜像名>")])])])]),t._v(" "),e("h3",{attrs:{id:"start"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[t._v("#")]),t._v(" start")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("start")]),t._v(" "),e("td",[t._v("启动容器,重启使用"),e("code",[t._v("restart")])]),t._v(" "),e("td",[t._v("<容器名>")])])])]),t._v(" "),e("h3",{attrs:{id:"stop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[t._v("#")]),t._v(" stop")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("stop")]),t._v(" "),e("td",[t._v("停止容器")]),t._v(" "),e("td",[t._v("<容器名>")])])])]),t._v(" "),e("h3",{attrs:{id:"volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[t._v("#")]),t._v(" volume")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("volume")]),t._v(" "),e("td",[t._v("查看数据卷")]),t._v(" "),e("td",[t._v("ls")])]),t._v(" "),e("tr",[e("td",[t._v("volume")]),t._v(" "),e("td",[t._v("创建数据卷")]),t._v(" "),e("td",[t._v("create")])]),t._v(" "),e("tr",[e("td",[t._v("volume")]),t._v(" "),e("td",[t._v("删除所有未使用的本地数据卷")]),t._v(" "),e("td",[t._v("prune")])]),t._v(" "),e("tr",[e("td",[t._v("volume")]),t._v(" "),e("td",[t._v("删除一个或者所有数据卷")]),t._v(" "),e("td",[t._v("rm")])])])]),t._v(" "),e("h3",{attrs:{id:"kill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[t._v("#")]),t._v(" kill")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("kill")]),t._v(" "),e("td",[t._v("暴力停止容器")]),t._v(" "),e("td",[t._v("<容器名>")])])])]),t._v(" "),e("h3",{attrs:{id:"rm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[t._v("#")]),t._v(" rm")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("rm")]),t._v(" "),e("td",[t._v("删除容器")]),t._v(" "),e("td",[t._v("<容器名>")])]),t._v(" "),e("tr",[e("td",[t._v("rm")]),t._v(" "),e("td",[t._v("强制删除容器")]),t._v(" "),e("td",[t._v("-f <容器名>")])]),t._v(" "),e("tr",[e("td",[t._v("rm")]),t._v(" "),e("td",[t._v("强制删除所有容器")]),t._v(" "),e("td",[t._v("-f $(docker ps -aq)")])])])]),t._v(" "),e("h3",{attrs:{id:"rename"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rename"}},[t._v("#")]),t._v(" rename")]),t._v(" "),e("p",[t._v("修改容器名称")]),t._v(" "),e("h2",{attrs:{id:"docker-数据卷-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-数据卷-2"}},[t._v("#")]),t._v(" Docker 数据卷")]),t._v(" "),e("p",[t._v("数据卷可以完成数据持久化和同步操作，语法："),e("code",[t._v("docker run -it -v <主机目录>:<容器目录> centos /bin/bash")])]),t._v(" "),e("p",[t._v("运行之后通过"),e("code",[t._v("docker inspect <容器id>")]),t._v("指令查看返回结果中的"),e("code",[t._v("Mounts")]),t._v("，来检测是否挂载成功：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Mounts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bind"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Source"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/Users/l.rain/Documents/workspace/DEMO/html/copy"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主机路径")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Destination"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/copy"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 容器路径")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Mode"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"RW"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Propagation"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rprivate"')]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("h3",{attrs:{id:"匿名挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匿名挂载"}},[t._v("#")]),t._v(" 匿名挂载")]),t._v(" "),e("p",[t._v("如果在使用"),e("code",[t._v("-v")]),t._v("时未指定主机目录，只有容器目录:"),e("code",[t._v("docker run -it /etc/test centos /bin/bash")]),t._v("，则在"),e("code",[t._v("docker volume ls")]),t._v("查看时，name为随机字符串。")]),t._v(" "),e("h3",{attrs:{id:"具名挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具名挂载"}},[t._v("#")]),t._v(" 具名挂载")]),t._v(" "),e("p",[t._v("如果在使用"),e("code",[t._v("-v")]),t._v("时主机目录不是"),e("code",[t._v("/")]),t._v("开头，则认为这是数据卷的名称:"),e("code",[t._v("docker run -it juming:/etc/test centos /bin/bash")]),t._v("，在"),e("code",[t._v("docker volume ls")]),t._v("查看时，name为该名称。")]),t._v(" "),e("h3",{attrs:{id:"查看挂载目录位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看挂载目录位置"}},[t._v("#")]),t._v(" 查看挂载目录位置")]),t._v(" "),e("p",[t._v("使用指令"),e("code",[t._v("docker volume inspect jumin")]),t._v("，返回结果中查找"),e("code",[t._v("Mountpoint")]),t._v("属性为该数据卷挂载位置。所有的docker容器内的卷，没有指定目录的情况下都是在"),e("code",[t._v("/var/lib/docker/volumes/xxx/_data")]),t._v("文件夹中。")]),t._v(" "),e("h3",{attrs:{id:"读写权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读写权限"}},[t._v("#")]),t._v(" 读写权限")]),t._v(" "),e("p",[t._v("容器位置尾部添加"),e("code",[t._v(":ro")]),t._v("或者"),e("code",[t._v(":rw")]),t._v("（默认值）添加只读或读写权限，例如："),e("code",[t._v("docker run -it juming:/etc/test:ro centos /bin/bash")]),t._v("。")]),t._v(" "),e("p",[t._v("设置为"),e("code",[t._v("ro")]),t._v("后就说明这个路径只能通过宿主机来操作，容器内部是无法操作的。")]),t._v(" "),e("h3",{attrs:{id:"数据卷容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器"}},[t._v("#")]),t._v(" 数据卷容器")]),t._v(" "),e("p",[t._v("把一个容器内的数据同步到其他容器中，使用指令"),e("code",[t._v("volumes-form")]),t._v(",语法："),e("code",[t._v("volumes-form <容器名称>")]),t._v("例如:"),e("code",[t._v("docker run -it --name docker02 --volumes-from docker01 kuangshen/centos:1.0")])]),t._v(" "),e("p",[t._v("删除数据卷容器不会使其他容器中的数据丢失，原理是，各个容器间的数据卷是同步拷贝的关系，如果删除数据卷容器，只是停止拷贝。")]),t._v(" "),e("h2",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# Dockerfile文件\nFROM ubuntu:16.04\nENV WORK_DIR=/workspace\nWORKDIR ${WORK_DIR}\nCOPY . ${WORK_DIR}\nRUN npm start\n\n")])])]),e("p",[t._v("Dockerfile 是一个文本文件，包含了镜像构建的所有命令，通过修改 Dockerfile 中的命令，就能定制化自己想要的镜像。Dockerfile 里面每一个指令都会构建一层镜像，层层叠加最终得到定制化镜像。")]),t._v(" "),e("h3",{attrs:{id:"add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" ADD")]),t._v(" "),e("p",[e("code",[t._v("ADD")]),t._v(" ADD 指令和 COPY 类似，但包含更多功能，比如可以从一个网址下载文件到目标目录中（下载后文件默认权限是 600），另外一个常用的功能是自动解压，支持 gzip、bzip2 和 xz 压缩格式，比如 ADD file.tar /会将压缩包解压到目标路径中。由于 ADD 指令语义不够清晰，除了需要自动解压的情况，我们一般都不推荐使用 ADD 指令。")]),t._v(" "),e("h3",{attrs:{id:"copy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[t._v("#")]),t._v(" COPY")]),t._v(" "),e("p",[e("code",[t._v("COPY")]),t._v("指令可以将宿主机中的文件在构建镜像时复制到镜像存储中。COPY命令在拷贝文件夹时，目的地址应该加上该文件夹名，例如："),e("code",[t._v("COPY logs /root/logs")]),t._v("\nCOPY命令可以一次拷贝多个文件：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("COPY README.md package.json gulpfile.js __BUILD_NUMBER ./\n// 或者\nCOPY "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__BUILD_NUMBER"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"README.md"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gulpfile"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"another_file"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("但是这种写法对文件夹无效，如果你写"),e("code",[t._v("COPY dir1 dir2 ./")]),t._v(",实际上等于："),e("code",[t._v("COPY dir1/* dir2/* ./")])]),t._v(" "),e("p",[e("code",[t._v(".dockerignore")]),t._v(" 指定的文件不会拷贝")]),t._v(" "),e("h3",{attrs:{id:"cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[t._v("#")]),t._v(" CMD")]),t._v(" "),e("p",[t._v("CMD 指令可以用来指定容器启动后默认的运行命令。"),e("code",[t._v("CMD")]),t._v(' 运行格式：CMD ["可执行文件", "参数 1", "参数 2"...]。')]),t._v(" "),e("p",[t._v("但能被"),e("code",[t._v("docker run")]),t._v("命令后面的命令行参数替换。比如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# Dockerfile\nCMD echo "Hello world"\n\n# bash\ndocker run -it [image]将输出Hello world\n# bash\ndocker run -it [image] /bin/bash 将会忽略掉CMD，什么也不输出。\n')])])]),e("h3",{attrs:{id:"env"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[t._v("#")]),t._v(" ENV")]),t._v(" "),e("p",[e("code",[t._v("ENV")]),t._v("设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。它有俩种写法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>\n")])])]),e("h3",{attrs:{id:"entrypoint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[t._v("#")]),t._v(" ENTRYPOINT")]),t._v(" "),e("p",[t._v("与"),e("code",[t._v("CMD")]),t._v("的区别就是，当启动容器时，如果添加命令会覆盖掉CMD中的内容，而指定"),e("code",[t._v("ENTRYPOINT")]),t._v("后，添加的命令会出现在"),e("code",[t._v("ENTRYPOINT")]),t._v("的命令后，相当于追加到后边。")]),t._v(" "),e("h3",{attrs:{id:"expose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[t._v("#")]),t._v(" EXPOSE")]),t._v(" "),e("p",[e("code",[t._v("EXPOSE")]),t._v(" 声明将容器内的某个端口导出供外部访问，并没有实际功能，导出端口还是需要在命令行中添加"),e("code",[t._v("-p")])]),t._v(" "),e("h3",{attrs:{id:"from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[t._v("#")]),t._v(" FROM")]),t._v(" "),e("p",[e("code",[t._v("FROM")]),t._v("指令代表基于哪个镜像进行修改，第一条指令必须是 FROM 指令，若我们不想基于任何镜像，可以写 FROM scratch 即可完全从零开始构建镜像。")]),t._v(" "),e("h3",{attrs:{id:"maintainer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maintainer"}},[t._v("#")]),t._v(" MAINTAINER")]),t._v(" "),e("p",[t._v("镜像是谁写的，姓名+邮箱")]),t._v(" "),e("h3",{attrs:{id:"volume-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volume-2"}},[t._v("#")]),t._v(" VOLUME")]),t._v(" "),e("p",[t._v("挂载的目录")]),t._v(" "),e("h3",{attrs:{id:"workdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[t._v("#")]),t._v(" WORKDIR")]),t._v(" "),e("p",[e("code",[t._v("WORKDIR")]),t._v("为"),e("code",[t._v("RUN、CMD、ENTRYPOINT")]),t._v(" 指令配置工作目录。在刚进入容器时，系统会自动转到工作目录，默认的工作目录是根目录/。"),e("br"),t._v("\n可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("WORKDIR /a\n\nWORKDIR b\n\nWORKDIR c\n\nRUN pwd\n# 则最终路径为 /a/b/c 。\n")])])]),e("h3",{attrs:{id:"onbuild"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#onbuild"}},[t._v("#")]),t._v(" ONBUILD")]),t._v(" "),e("p",[t._v("当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令，触发指令。")]),t._v(" "),e("h3",{attrs:{id:"run-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run-2"}},[t._v("#")]),t._v(" RUN")]),t._v(" "),e("p",[t._v("使用 RUN 指令安装应用和软件包，构建镜像。"),e("code",[t._v("dockerfile")]),t._v("可以有多个"),e("code",[t._v("RUN")]),t._v("指令。由于一条指令就会创建一层镜像，而镜像层数是有限制的，一般是 127 层，当我们需要执行多条命令时，一般都用&&连接多条命令，从而节省镜像层数。执行时机是在容器启动之前。")]),t._v(" "),e("h2",{attrs:{id:"docker-compose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" docker-compose")]),t._v(" "),e("h3",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("是将你的多个 docker 容器服务整合起来的命令行工具，假设你有一个 MySQL 实例和一个 Node.js 实例分别部署在两个容器中，仅需一个"),e("code",[t._v("docker-compose.yml")]),t._v("文件，docker-compose 就可以为你完成从打包到运行的所有步骤。")]),t._v(" "),e("p",[t._v("docker-compose下启动的服务都在同一个网络下（域名访问）")]),t._v(" "),e("h3",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("本地开发环境中docker内置了docker-compose，但是服务器环境需要安装依赖：")]),t._v(" "),e("ul",[e("li",[t._v("在 terminal 中运行 "),e("code",[t._v("sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-$(uname -s)-(uname -m) -o /usr/local/bin/docker-compose")]),t._v(" 下载 docker-compose 的安装脚本")]),t._v(" "),e("li",[t._v("官方地址很慢，使用国内地址："),e("code",[t._v('sudo curl -L "https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose')])]),t._v(" "),e("li",[t._v("为脚本添加执行权限"),e("code",[t._v("sudo chmod +x /usr/local/bin/docker-compose")])]),t._v(" "),e("li",[t._v("执行脚本"),e("code",[t._v("sh /usr/local/bin/docker-compose")])])]),t._v(" "),e("h3",{attrs:{id:"容器编排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器编排"}},[t._v("#")]),t._v(" 容器编排")]),t._v(" "),e("p",[t._v("docker-compose 使用目录下的"),e("code",[t._v("docker-compose.yml")]),t._v(" 作为项目的配置文件， 以上述我们举的 MySQL 和 Node.js 应用的例子 "),e("code",[t._v("docker-compose.yml")]),t._v(" 文件应该具有类似以下的结构：")]),t._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("latest\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3306:3306'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MYSQL_ROOT_PASSWORD")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456'")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("webapp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" webapp\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mysql'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("NODE_ENV")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'80:8080'")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[t._v("#")]),t._v(" 流程")]),t._v(" "),e("ol",[e("li",[t._v("创建网络")]),t._v(" "),e("li",[t._v("执行"),e("code",[t._v("Docker-compose yaml")])]),t._v(" "),e("li",[t._v("依据当前项目所在文件夹名+services中的服务名称+"),e("code",[t._v("n")]),t._v(",创建镜像名。")]),t._v(" "),e("li",[t._v("启动服务")]),t._v(" "),e("li",[t._v("如果提示镜像不存在，则再次运行"),e("code",[t._v("docker-compose build")])])]),t._v(" "),e("h3",{attrs:{id:"指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[t._v("#")]),t._v(" 指令")]),t._v(" "),e("h4",{attrs:{id:"up"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#up"}},[t._v("#")]),t._v(" up")]),t._v(" "),e("p",[t._v("启动服务，输入参数"),e("code",[t._v("-d")]),t._v("可以后台运行。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("docker compose up -d\n")])])]),e("p",[t._v("命名规则：用"),e("code",[t._v("docker compose")]),t._v("创建的容器，名字都会加入一个对应文件夹的名字，比如我在的文件夹叫做"),e("code",[t._v("test")]),t._v(",而我在"),e("code",[t._v("yaml")]),t._v("文件中起的名字是"),e("code",[t._v("my-wordpress")]),t._v("。最终容器的名字就是"),e("code",[t._v("test_my-wordpress_1")])]),t._v(" "),e("p",[t._v("这个前缀其实是可以改的，比如我们希望前缀加上"),e("code",[t._v("jspang")]),t._v("。就可以使用"),e("code",[t._v("-p")]),t._v("参数。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("docker-compose -p jspang up -d\n")])])]),e("p",[t._v("你也可以在"),e("code",[t._v("yaml")]),t._v("文件里指定这个名字,方法是使用"),e("code",[t._v("contaner_name: xxx")]),t._v("但是这样作就会完全省略前缀和后缀。")]),t._v(" "),e("div",{staticClass:"language-SH extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("version: "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.8"')]),t._v("\n\nservices:\n  my-wordpress:\n        container_name: jspang\n    image: wordpress:latest\n    ports:\n      - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80\n")])])]),e("p",[t._v("额外参数：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("--build")]),t._v(":重新构建")])]),t._v(" "),e("h4",{attrs:{id:"ps-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ps-2"}},[t._v("#")]),t._v(" ps")]),t._v(" "),e("p",[t._v("查看"),e("code",[t._v("service")]),t._v("运行情况，使用"),e("code",[t._v("docker-compose ps")]),t._v("命令")]),t._v(" "),e("h4",{attrs:{id:"down"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#down"}},[t._v("#")]),t._v(" down")]),t._v(" "),e("p",[t._v("停止，也可以"),e("code",[t._v("ctrl+c")])]),t._v(" "),e("h4",{attrs:{id:"stop-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stop-2"}},[t._v("#")]),t._v(" stop")]),t._v(" "),e("p",[t._v("停止service："),e("code",[t._v("docker compose stop")])]),t._v(" "),e("h4",{attrs:{id:"rm-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rm-2"}},[t._v("#")]),t._v(" rm")]),t._v(" "),e("p",[t._v("删除容器，"),e("code",[t._v("docker compose rm")])]),t._v(" "),e("p",[t._v("命令会删除掉由"),e("code",[t._v("docker compose")]),t._v("所建立的容器，但用docker命令创建的容器不会被删除，对应的网络也不会被删除")]),t._v(" "),e("h3",{attrs:{id:"docker-compose-yml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[t._v("#")]),t._v(" docker-compose.yml")]),t._v(" "),e("p",[t._v("使用yml文件时需要指定兼容的docker版本，具体对应版本在这里"),e("a",{attrs:{href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("yml文件总共有3层：")]),t._v(" "),e("ol",[e("li",[t._v("version:")]),t._v(" "),e("li",[t._v("services:\n"),e("ol",[e("li",[t._v("服务:\n"),e("ol",[e("li",[t._v("docker配置")])])])])]),t._v(" "),e("li",[t._v("其他配置 网络/卷挂载、全局规则，"),e("code",[t._v("volumes、networks、configs")]),t._v("等")])]),t._v(" "),e("h4",{attrs:{id:"serverces"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serverces"}},[t._v("#")]),t._v(" serverces")]),t._v(" "),e("ol",[e("li",[t._v("depends_on:依赖项，会决定容器的启动顺序")]),t._v(" "),e("li",[t._v("stdin_open: true|false，与"),e("code",[t._v("-i")]),t._v("相同")]),t._v(" "),e("li",[t._v("command:覆盖docker指令中的"),e("code",[t._v("CMD")])])]),t._v(" "),e("h2",{attrs:{id:"docker发布镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker发布镜像"}},[t._v("#")]),t._v(" docker发布镜像")]),t._v(" "),e("ol",[e("li",[t._v("注册dockerhub账号")]),t._v(" "),e("li",[t._v("命令行登录dockerhub："),e("code",[t._v("docker login -u <用户名>")])]),t._v(" "),e("li",[t._v("发布："),e("code",[t._v("docker push <用户名>/<镜像名>:<版本号>")]),t._v("，如果需要版本号，需要先在本地使用"),e("code",[t._v("docker tag")]),t._v("打上标签，才能发布。")])]),t._v(" "),e("h4",{attrs:{id:"阿里云发布镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阿里云发布镜像"}},[t._v("#")]),t._v(" 阿里云发布镜像")]),t._v(" "),e("ol",[e("li",[t._v("登录阿里云后找到容器镜像服务")]),t._v(" "),e("li",[t._v("创建命名空间")]),t._v(" "),e("li",[t._v("然后去镜像仓库创建")]),t._v(" "),e("li",[t._v("然后按照仓库中的操作指南一步一步走就可以了。")])]),t._v(" "),e("h2",{attrs:{id:"调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[t._v("#")]),t._v(" 调试")]),t._v(" "),e("ol",[e("li",[t._v("查看容器输出："),e("code",[t._v("docker logs -f contianer_name/container_id")])]),t._v(" "),e("li",[t._v("打印出容器的端口映射、目录挂载、网络等等："),e("code",[t._v("docker inspect contianer_name/container_id")])]),t._v(" "),e("li",[t._v("build命令前加"),e("code",[t._v("DOCKER_BUILDKIT=0")]),t._v("可以查看更多信息")])]),t._v(" "),e("h2",{attrs:{id:"docker-部署流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-部署流程"}},[t._v("#")]),t._v(" docker 部署流程")]),t._v(" "),e("ol",[e("li",[t._v("首先在项目根目录下创建"),e("code",[t._v(".dockerignore")]),t._v("文件，防止打包不必要的文件：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".git\nnode_modules\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("项目根目录中创建"),e("code",[t._v("Dockerfile")]),t._v("文件：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("FROM node:10.0\n\n# 在容器中创建一个目录\nRUN mkdir -p /usr/src/nodejs/\n\n# 定位到容器的工作目录\nWORKDIR /usr/src/nodejs/\n\n# RUN/COPY/ADD 是分层的，package.json 提前，只要没修改，就不会重新安装包\nCOPY package.json /usr/src/app/package.json\nRUN cd /usr/src/app/\nRUN npm i\n\n# 把当前目录下的所有文件拷贝到 Image 的 /usr/src/nodejs/ 目录下\nCOPY . /usr/src/nodejs/\n\n\nEXPOSE 3000\nCMD npm start\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("构建镜像")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker build -t ubuntu_demo:latest .\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("publish镜像")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker login\ndocker tag [本地镜像] [doker hub远程仓库名称]\ndocker push [doker hub远程仓库名称]\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"docker网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker网络"}},[t._v("#")]),t._v(" docker网络")]),t._v(" "),e("h3",{attrs:{id:"docker0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker0"}},[t._v("#")]),t._v(" docker0")]),t._v(" "),e("p",[t._v("mac环境下没有docker0，linux环境有，默认安装docker后都会产生一个docker0网卡。所有容器不指定网络的情况下，都是走docker0路由的，docker会给容器分配一个默认的可用ip")]),t._v(" "),e("ol",[e("li",[t._v("每启动一个docker容器，docker就会给docker容器分配一个ip，因为使用了linux的"),e("code",[t._v("veth-pair")]),t._v("技术，就是一堆的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连。正因为这个特性，veth-pair充当一个桥梁，链接各种虚拟网络设备的。")]),t._v(" "),e("li",[t._v("因为上面的特性，docker容器之间可以相互ping通")])]),t._v(" "),e("p",[t._v("![image-20210907164131824](/Users/l.rain/Library/Application Support/typora-user-images/image-20210907164131824.png)")]),t._v(" "),e("p",[t._v("Docker使用的是Linux的桥接，宿主机中是一个Docker容器的网桥docker0，docker中的所有的网络接口都是虚拟的。虚拟的转发效率高。")]),t._v(" "),e("p",[t._v("只要容器删除，对应网桥一对就没了。")]),t._v(" "),e("p",[t._v("docker每次重启都会变更ip。")]),t._v(" "),e("h3",{attrs:{id:"link-不建议使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#link-不建议使用"}},[t._v("#")]),t._v(" --link （不建议使用）")]),t._v(" "),e("p",[t._v("容器之间是不可以通过服务名ping通的，如果想做到这一点，那么启动容器时使用"),e("code",[t._v("--link <容器名>")]),t._v("指定需要ping通的容器名，但是只能单向访问，不是双向的。")]),t._v(" "),e("p",[t._v("实质：是在相应容器中的hosts配置中添加了一个ip映射。")]),t._v(" "),e("p",[t._v("不建议使用：docker0无法自定义网络，不支持容器名链接访问。")]),t._v(" "),e("h3",{attrs:{id:"自定义网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义网络"}},[t._v("#")]),t._v(" 自定义网络")]),t._v(" "),e("h4",{attrs:{id:"网络模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络模式"}},[t._v("#")]),t._v(" 网络模式")]),t._v(" "),e("ol",[e("li",[t._v("bridge：桥接docker（默认，推荐）")]),t._v(" "),e("li",[t._v("none：不配置网络")]),t._v(" "),e("li",[t._v("host：和宿主机共享网络")]),t._v(" "),e("li",[t._v("container：容器网络联通（用得少，局限很大）")])]),t._v(" "),e("h4",{attrs:{id:"测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("docker run -d -P --name tomcat01 tomcat "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#当我们执行这条语句时，相当于执行下边的默认值语句")]),t._v("\ndocker run -d -P --name tomcat01 --net bridge tomcat \n")])])]),e("p",[t._v("因为docker0的特点：域名不能访问。我们可以自定义一个网络")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("docker network create --driver bridge --subnet "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.0/16 --gateway "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1 mynet\n")])])]),e("p",[t._v("自定义的网络可以用来在docker创建镜像时指定，例如："),e("code",[t._v("--net mynet")]),t._v("。")]),t._v(" "),e("p",[t._v("自定义网络的好处：")]),t._v(" "),e("ol",[e("li",[t._v("不需要"),e("code",[t._v("--link")]),t._v(",就可以ping通其他容器。")]),t._v(" "),e("li",[t._v("可以直接通过容器名ping通")])]),t._v(" "),e("h4",{attrs:{id:"网络连通"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络连通"}},[t._v("#")]),t._v(" 网络连通")]),t._v(" "),e("p",[t._v("如何把容器链接到一个网络上？把当前容器的网络放到另一个容器下，也就是一个容器两个ip地址。")]),t._v(" "),e("p",[t._v("使用"),e("code",[t._v("docker network connect <容器1> <容器2>")]),t._v(",依旧是单向连接的。")]),t._v(" "),e("h2",{attrs:{id:"linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[t._v("#")]),t._v(" Linux")]),t._v(" "),e("h3",{attrs:{id:"启动docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动docker"}},[t._v("#")]),t._v(" 启动docker")]),t._v(" "),e("p",[t._v("启动docker："),e("code",[t._v("sudo systemctl start docker")])]),t._v(" "),e("h2",{attrs:{id:"最佳实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[t._v("#")]),t._v(" 最佳实践")]),t._v(" "),e("ol",[e("li",[t._v("选择更小的镜像，相较于其他发行版镜像，"),e("code",[t._v("Alpine")]),t._v("版更小，仅包含最小的必须的软件包")]),t._v(" "),e("li",[t._v("减少 Docker 的层数。"),e("br"),t._v("\nCOPY、ADD 和 RUN 会向镜像中添加新层，Docker 的层就像是 git 的提交一样，Docker 的层用于保存镜像的上一版本和当前版本之间的差异。当你向注册表请求镜像时，只是下载你尚未拥有的层。"),e("br"),t._v("\n层会占用空间，拥有的层越多，最终的镜像就越大")]),t._v(" "),e("li",[t._v("镜像加速：如果使用阿里云镜像，那么可以在"),e("code",[t._v("镜像中心->镜像加速器")]),t._v("中查看如何配置加速器。")]),t._v(" "),e("li",[t._v("docker项目目录应使用一个全新的目录，防止其他问题出现")]),t._v(" "),e("li",[t._v("前端优化：https://zhuanlan.zhihu.com/p/102853707")])]),t._v(" "),e("h2",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),e("h3",{attrs:{id:"docker-build与yarn一起使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-build与yarn一起使用"}},[t._v("#")]),t._v(" docker build与yarn一起使用")]),t._v(" "),e("p",[t._v("报错"),e("code",[t._v("Couldn't find the binary git")]),t._v(",原因是yarn必须依赖git,在安装包前使用"),e("code",[t._v("RUN apk add --no-cache git")]),t._v("安装git")]),t._v(" "),e("h3",{attrs:{id:"docker为什么-d后台启动容器后-容器停止了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker为什么-d后台启动容器后-容器停止了"}},[t._v("#")]),t._v(" docker为什么"),e("code",[t._v("-d")]),t._v("后台启动容器后，容器停止了？")]),t._v(" "),e("p",[t._v("docker容器使用后台运行，就必须要有一个前台进程，，否则docker发现没有应用，就会自动停止。")]),t._v(" "),e("h3",{attrs:{id:"docker镜像挂载外部文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像挂载外部文件"}},[t._v("#")]),t._v(" docker镜像挂载外部文件？")]),t._v(" "),e("p",[t._v("比如说想加载一个外部配置文件或者一个目录，那么可以通过以下方式指定：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("docker run -it -v /test:/soft centos /bin/bash  \n")])])]),e("p",[t._v('冒号":"前面的目录是宿主机目录，后面的目录是容器内目录。')]),t._v(" "),e("blockquote",[e("p",[t._v("参考 https://www.cnblogs.com/shix0909/p/11124466.html")])]),t._v(" "),e("h3",{attrs:{id:"删除所有none标签镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除所有none标签镜像"}},[t._v("#")]),t._v(" 删除所有none标签镜像")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker images | grep none | awk '{ print $3; }' | xargs docker rmi\n")])])]),e("h3",{attrs:{id:"删除所有-images"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除所有-images"}},[t._v("#")]),t._v(" 删除所有 images")]),t._v(" "),e("blockquote",[e("p",[t._v("删除镜像需要先删除一次镜像为基础的容器")])]),t._v(" "),e("p",[e("code",[t._v("docker rmi --force $(docker images -q)")])]),t._v(" "),e("h3",{attrs:{id:"删除所有镜像和容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除所有镜像和容器"}},[t._v("#")]),t._v(" 删除所有镜像和容器")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker system prune -a\n")])])]),e("h3",{attrs:{id:"删除名称中包含某个字符串的镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除名称中包含某个字符串的镜像"}},[t._v("#")]),t._v(" 删除名称中包含某个字符串的镜像")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 例如删除包含“some”的镜像\ndocker rmi --force $(docker images | grep some | awk '{print $3}')\n\n")])])]),e("h3",{attrs:{id:"mac无法ping通容器中的ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mac无法ping通容器中的ip"}},[t._v("#")]),t._v(" mac无法ping通容器中的ip？")]),t._v(" "),e("p",[t._v("因为mac在容器和主机中间有一层"),e("code",[t._v("docker vm")]),t._v(",所以ping不通，进到"),e("code",[t._v("docker vm")]),t._v("里就可以ping通了。")]),t._v(" "),e("h3",{attrs:{id:"配置-p后公网ip无法访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-p后公网ip无法访问"}},[t._v("#")]),t._v(" 配置-p后公网ip无法访问？")]),t._v(" "),e("p",[t._v("原因有可能是服务器没有添加相关端口的防火墙规则")]),t._v(" "),e("h2",{attrs:{id:"学习资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#学习资源"}},[t._v("#")]),t._v(" 学习资源")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/BV1og4y1q7M4",target:"_blank",rel:"noopener noreferrer"}},[t._v("【狂神说Java】Docker最新超详细版教程通俗易懂"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/ryanyangcs/p/12558727.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("两个奇技淫巧，将 Docker 镜像体积减小 99%"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);