(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{492:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范"}},[t._v("#")]),t._v(" 规范")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://github.com/tc39/ecma262",target:"_blank",rel:"noopener noreferrer"}},[t._v("ecma262"),s("OutboundLink")],1)])]),t._v(" "),s("blockquote",[s("p",[t._v("ECMA-262的状态、进程和文档")])]),t._v(" "),s("h2",{attrs:{id:"内置对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[t._v("#")]),t._v(" 内置对象")]),t._v(" "),s("h3",{attrs:{id:"array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),s("ol",[s("li",[t._v("Array.prototype.forEach()\nforEach遍历的对象如果是基础数据类型，那么不会修改原数组，但是如果为引用数据类型，可以修改原数组")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \narr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \narr2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2,3,4]")]),t._v("\n \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [{a:1},{a:4},{a:9}]")]),t._v("\n")])])]),s("h3",{attrs:{id:"object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),s("ul",[s("li",[t._v("Object.keys()\n"),s("ul",[s("li",[t._v("操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用for...in循环，而用Object.keys()代替 ​​​​")])])])]),t._v(" "),s("h3",{attrs:{id:"promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),s("p",[t._v("new Promise会立即执行，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行")]),t._v(" "),s("h3",{attrs:{id:"error"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error"}},[t._v("#")]),t._v(" Error")]),t._v(" "),s("p",[t._v("创建错误对象："),s("code",[t._v("const err=Error('这里是错误')")]),s("br"),t._v("\n创建后，错误对象将包含三个属性：")]),t._v(" "),s("ul",[s("li",[t._v("message：包含错误消息的字符串")]),t._v(" "),s("li",[t._v("name:错误的类型")]),t._v(" "),s("li",[t._v("stack⚠️ ：函数执行的堆栈追踪")])]),t._v(" "),s("p",[t._v("除了Error对象还有：")]),t._v(" "),s("ul",[s("li",[t._v("EvalError")]),t._v(" "),s("li",[t._v("InternalError⚠️")]),t._v(" "),s("li",[t._v("RangeError")]),t._v(" "),s("li",[t._v("ReferenceError")]),t._v(" "),s("li",[t._v("SyntaxError")]),t._v(" "),s("li",[t._v("TypeError")]),t._v(" "),s("li",[t._v("URIError")])]),t._v(" "),s("p",[t._v("除了这些内置错误外，在浏览器中我们还可以找到：")]),t._v(" "),s("ul",[s("li",[t._v("DOMException： DOMException 接口代表调用方法或访问 Web API 属性时发生的异常事件")]),t._v(" "),s("li",[t._v("DOMError⚠️ ,已弃用，如今不再使用。")])]),t._v(" "),s("p",[t._v("只有错误对象被抛出的时候才成为异常")]),t._v(" "),s("h3",{attrs:{id:"date"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[t._v("#")]),t._v(" Date")]),t._v(" "),s("p",[t._v("名词解释：")]),t._v(" "),s("ul",[s("li",[t._v("UTC：格林威治标准时间，例如：也叫做GMT时间。由UTC时间还可以引申出本地时间，所谓本地时间流逝格林威治标准时间加上时区差，东为正，西为负。如，北京时间为UTC+0800。获取UTC的方法:")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" UTCseconds "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTimezoneOffset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTCseconds"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UTCseconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Unix时间戳：Unix时间戳是从1970年1月1日到"),s("code",[t._v("给定时间")]),t._v("所经过的秒数，所以跟本地时间还是UTC时间没有关系。在js中等于"),s("code",[t._v("var seconds = Math.floor(Date.now() / 1000);")])])]),t._v(" "),s("h2",{attrs:{id:"语句和声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句和声明"}},[t._v("#")]),t._v(" 语句和声明")]),t._v(" "),s("h3",{attrs:{id:"try-catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-catch"}},[t._v("#")]),t._v(" try...catch")]),t._v(" "),s("p",[t._v("try catch中任何给定的异常只会被离它最近的封闭 catch 块捕获一次。如果从finally块中返回一个值，无论是否有return语句在try和catch中，这个值将会成为整个try-catch-finally的返回值。多个try catch嵌套时，先执行最里边的try catch,当嵌套try catch throw 一个新error时，会先运行它自己的finally块再执行外部的catch块")]),t._v(" "),s("h3",{attrs:{id:"export"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#export"}},[t._v("#")]),t._v(" export")]),t._v(" "),s("p",[t._v("export与import必须处于模块顶层，import具有提升效果，导入多个相同模块时，其实相当于只导入一个，用*可以导出所有模块的输出值，加载出来的模块不可修改")]),t._v(" "),s("h3",{attrs:{id:"class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[t._v("#")]),t._v(" class")]),t._v(" "),s("p",[t._v("class不会变量提升")]),t._v(" "),s("h3",{attrs:{id:"var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" var")]),t._v(" "),s("ul",[s("li",[t._v("通过var创建的全局变量（再任何函数体之外创建的变量）不能被删除。")]),t._v(" "),s("li",[t._v("没有用var创建的隐式全局变量（不考虑函数内的情况）可以被删除。")])]),t._v(" "),s("blockquote",[s("p",[t._v("在浏览器环境中，所有js代码都是在"),s("code",[t._v("window")]),t._v("作用域内的，所以在这种情况下，我们所说的全局变量其实都是"),s("code",[t._v("window")]),t._v("下的一个属性， 所以可以用"),s("code",[t._v("delete")]),t._v("删除，但在如\n"),s("code",[t._v("nodejs")]),t._v("或"),s("code",[t._v("gjs")]),t._v("等非浏览器环境下，显示生命的全局变量无法用"),s("code",[t._v("delete")]),t._v("删除")])]),t._v(" "),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("h3",{attrs:{id:"async和await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async和await"}},[t._v("#")]),t._v(" async和await")]),t._v(" "),s("h2",{attrs:{id:"表达式和运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式和运算符"}},[t._v("#")]),t._v(" 表达式和运算符")]),t._v(" "),s("h3",{attrs:{id:"spread-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spread-syntax"}},[t._v("#")]),t._v(" Spread syntax")]),t._v(" "),s("ul",[s("li",[t._v("展开语法（...）内部使用for...of循环")]),t._v(" "),s("li",[t._v("可以通过扩展运算符将具有Iterator接口的arrlike转换成array,Array.from()可以将带有length属性的对象转换成array，相较与前者少了Iterator的限制。 ​​​​")])]),t._v(" "),s("h3",{attrs:{id:"按位操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按位操作符"}},[t._v("#")]),t._v(" 按位操作符")]),t._v(" "),s("ol",[s("li",[t._v("非位运算符~，简单的理解，对任一数值 x 进行按位非操作的结果为 -(x + 1)，那么, ~~x就为 -(-(x+1) + 1)。判断数值中是否有某元素时，以前这样判断：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//易读")]),t._v("\n")])])]),s("p",[t._v("现在可以这样判断：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//简洁")]),t._v("\n")])])]),s("p",[t._v("对于浮点数，~~value可以代替parseInt(value)，而且前者效率更高些")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-2")]),t._v("\n")])])]),s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("h2",{attrs:{id:"继承和原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承和原型链"}},[t._v("#")]),t._v(" 继承和原型链")]),t._v(" "),s("h3",{attrs:{id:"原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),s("p",[t._v("原型是一个普通的对象，你所创建的每一个函数会自动带有"),s("code",[t._v("prototype")]),t._v("属性，这个属性指向一个空对象，这个空对象包含一个"),s("code",[t._v("constructor")]),t._v("属性，它指向你新建的函数而不是内置的"),s("code",[t._v("Object()")]),t._v("。")]),t._v(" "),s("ol",[s("li",[t._v("prototype\n"),s("ol",[s("li",[t._v("构造函数的"),s("code",[t._v("prototype")]),t._v("等于实例对象的"),s("code",[t._v("proto")]),t._v(",指向的就是原型对象")]),t._v(" "),s("li",[t._v("prototype只有函数才有")])])]),t._v(" "),s("li",[t._v("proto\n"),s("ol",[s("li",[t._v("一个对象的"),s("code",[t._v("__proto__")]),t._v("总是指向它的构造函数的prototype")]),t._v(" "),s("li",[s("code",[t._v("Object.prototype.__proto__===null")]),t._v(",继承链的终点等于"),s("code",[t._v("null")])])])]),t._v(" "),s("li",[t._v("constructor\n"),s("ol",[s("li",[t._v("原型对象的"),s("code",[t._v("constructor")]),t._v("指向构造函数")])])])]),t._v(" "),s("p",[t._v("用一张图来汇总他们之间的关系：\n"),s("img",{attrs:{src:"https://blog-pic.oss-cn-beijing.aliyuncs.com/JavaScript%E4%B9%8B%E6%97%85_2020-3-3-8-47-54.png",alt:"JavaScript之旅_2020-3-3-8-47-54.png"}})]),t._v(" "),s("blockquote",[s("p",[t._v("引用："),s("a",{attrs:{href:"https://www.jianshu.com/p/7d58f8f45557",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章看懂_proto_和prototype的关系及区别"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[t._v("#")]),t._v(" new")]),t._v(" "),s("p",[t._v("内建对象函数都可以在前面加上 new 来被调用，这使函数调用成为一个 构造器调用（constructor call）。这是一个重要而微妙的区别：实际上不存在“构造器函数”这样的东西，而只有函数的构造器调用。")]),t._v(" "),s("p",[t._v("new 的原理很简单, 就是引擎内部新建一个空对象，然后将这个空对象的proto 指向构造函数的prototype.然后调用构造函数，去填充我们创建的空对象(如果有必要)。 最后将this指向我们刚刚创建的新对象。")]),t._v(" "),s("p",[t._v("如果用代码来表示，大概是这样的：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myNew")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("constructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" constructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("引用:"),s("a",{attrs:{href:"https://lucifer.ren/fe-interview/#/topics/js/prototype?id=new",target:"_blank",rel:"noopener noreferrer"}},[t._v("大前端面试宝典 - 图解前端"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"术语表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语表"}},[t._v("#")]),t._v(" 术语表")]),t._v(" "),s("h3",{attrs:{id:"hoisting-变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hoisting-变量提升"}},[t._v("#")]),t._v(" Hoisting（变量提升）")]),t._v(" "),s("p",[t._v("变量和函数的声明会在编译阶段被放入内存中。"),s("code",[t._v("JavaScript")]),t._v(" 仅提升声明，而不提升初赋值")]),t._v(" "),s("ol",[s("li",[t._v("所有的声明都会提升到作用域的最顶上去。")]),t._v(" "),s("li",[t._v("同一个变量只会声明一次，其他的会被忽略掉。")]),t._v(" "),s("li",[t._v("函数声明的优先级高于变量申明的优先级，并且函数声明和函数定义的部分一起被提升。")])]),t._v(" "),s("p",[t._v("例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出1，不会输出2。函数声明和变量声明都会被提升，但是需要注意的是函数会先被提升，然后才是变量。")]),t._v("\n")])])]),s("p",[t._v("等同于：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("引用："),s("a",{attrs:{href:"https://blog.51cto.com/11871779/2119667",target:"_blank",rel:"noopener noreferrer"}},[t._v("js中的变量提升和函数提升"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("h3",{attrs:{id:"数字转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字转换"}},[t._v("#")]),t._v(" 数字转换")]),t._v(" "),s("ol",[s("li",[t._v('parseInt("08")')]),t._v(" "),s("li",[t._v("+'08'")]),t._v(" "),s("li",[t._v("Number('08')")])]),t._v(" "),s("blockquote",[s("p",[t._v("速度:1<2和3")])]),t._v(" "),s("h2",{attrs:{id:"最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[t._v("#")]),t._v(" 最佳实践")]),t._v(" "),s("h3",{attrs:{id:"分解大型运算任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分解大型运算任务"}},[t._v("#")]),t._v(" 分解大型运算任务")]),t._v(" "),s("p",[t._v("分解为小任务可以使得运算能够适时释放，可以防止阻塞I/O")]),t._v(" "),s("h3",{attrs:{id:"转换数字为整数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换数字为整数"}},[t._v("#")]),t._v(" 转换数字为整数")]),t._v(" "),s("p",[t._v("使用非位运算符可以代替parseInt(value)，而且前者效率更高些")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("～～")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),s("h3",{attrs:{id:"export-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#export-2"}},[t._v("#")]),t._v(" export")]),t._v(" "),s("p",[t._v("ES6编程风格：如果模块默认输出一个函数，函数名的首字母应该小写。如果模块默认输出一个对象，对象名的首字母应该大写。 ​​​​")]),t._v(" "),s("h2",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),s("h3",{attrs:{id:"es6-class-组合优先于继承-什么时候使用继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-class-组合优先于继承-什么时候使用继承"}},[t._v("#")]),t._v(" ES6 class 组合优先于继承,什么时候使用继承?")]),t._v(" "),s("ol",[s("li",[t._v('你的继承表示"是一个"的关系而不是"有一个"的关系（人类->动物 vs 用户->用户详情）；')]),t._v(" "),s("li",[t._v("你可以重用来自基类的代码（人可以像所有动物一样行动）；")]),t._v(" "),s("li",[t._v("你想通过基类对子类进行全局的修改（改变所有动物行动时的热量消耗）；")])]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("a",{attrs:{href:"https://github.com/beginor/clean-code-javascript#%E7%BB%84%E5%90%88%E4%BC%98%E5%85%88%E4%BA%8E%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码整洁的 JavaScript"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"怎么侦测当前代码是否在es6模块之中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么侦测当前代码是否在es6模块之中"}},[t._v("#")]),t._v(" 怎么侦测当前代码是否在es6模块之中？")]),t._v(" "),s("p",[t._v("ES6模块中顶层的this值为undefined，利用这个语法点可以侦测当前代码是否在ES6模块之中。")]),t._v(" "),s("h3",{attrs:{id:"js内存泄漏的几种原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js内存泄漏的几种原因"}},[t._v("#")]),t._v(" js内存泄漏的几种原因？")]),t._v(" "),s("p",[t._v("js可能出现内存泄漏的五种原因：闭包函数、全局变量、对象属性循环引用、DOM节点删除时未解绑事件、Map和Set的属性直接被删除。 ​​​​")]),t._v(" "),s("h3",{attrs:{id:"为什么-2017-01-01-2016-12-31-字符串是怎么进行比较的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-2017-01-01-2016-12-31-字符串是怎么进行比较的"}},[t._v("#")]),t._v(' 为什么"2017-01-01">"2016-12-31"？字符串是怎么进行比较的？')]),t._v(" "),s("p",[t._v('其实是按每个字符的 charCode 大小逐个进行比较。例如："a11"<"a2"为true。 ​​​​')])])}),[],!1,null,null,null);a.default=r.exports}}]);