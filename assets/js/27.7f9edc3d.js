(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{449:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"node特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node特点"}},[t._v("#")]),t._v(" Node特点")]),t._v(" "),a("h3",{attrs:{id:"_1-异步i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步i-o"}},[t._v("#")]),t._v(" 1.异步I/O")]),t._v(" "),a("h3",{attrs:{id:"_2-事件与回掉函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件与回掉函数"}},[t._v("#")]),t._v(" 2.事件与回掉函数")]),t._v(" "),a("h3",{attrs:{id:"_3-单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-单线程"}},[t._v("#")]),t._v(" 3.单线程")]),t._v(" "),a("p",[t._v("单线程的缺点：")]),t._v(" "),a("ul",[a("li",[t._v("无法利用多核处理器")]),t._v(" "),a("li",[t._v("错误会引起整个应用退出，应用的健壮性值得考验")]),t._v(" "),a("li",[t._v("大量计算占用cpu导致无法继续调用异步I/O")])]),t._v(" "),a("h3",{attrs:{id:"_4-跨平台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-跨平台"}},[t._v("#")]),t._v(" 4.跨平台")]),t._v(" "),a("ul",[a("li",[t._v("操作系统与Node上层模块系统之间构建了一层平台层架构，即libuv")]),t._v(" "),a("li",[t._v("混合应用")])]),t._v(" "),a("h3",{attrs:{id:"_5-低资源占用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-低资源占用"}},[t._v("#")]),t._v(" 5.低资源占用")]),t._v(" "),a("ul",[a("li",[t._v("适合做云平台开发")])]),t._v(" "),a("h3",{attrs:{id:"_6-前端赋能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-前端赋能"}},[t._v("#")]),t._v(" 6.前端赋能")]),t._v(" "),a("ul",[a("li",[t._v("serverless")]),t._v(" "),a("li",[t._v("工具编写")]),t._v(" "),a("li",[t._v("桌面图形界面应用程序")])]),t._v(" "),a("h2",{attrs:{id:"node应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node应用场景"}},[t._v("#")]),t._v(" Node应用场景")]),t._v(" "),a("h3",{attrs:{id:"_1-i-o密集型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-i-o密集型"}},[t._v("#")]),t._v(" 1.I/O密集型")]),t._v(" "),a("p",[t._v("适合IO密集型，是因为js天生的异步写法，并不是比其他语言优秀，也因为node刚出的时候java对异步支持不是很好。")]),t._v(" "),a("h3",{attrs:{id:"_2-不擅长cpu密集型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-不擅长cpu密集型"}},[t._v("#")]),t._v(" 2.不擅长CPU密集型")]),t._v(" "),a("h3",{attrs:{id:"_3-与一流系统和平共处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-与一流系统和平共处"}},[t._v("#")]),t._v(" 3.与一流系统和平共处")]),t._v(" "),a("h3",{attrs:{id:"_4-分布式应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式应用"}},[t._v("#")]),t._v(" 4.分布式应用")]),t._v(" "),a("h2",{attrs:{id:"node模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node模块"}},[t._v("#")]),t._v(" Node模块")]),t._v(" "),a("p",[t._v("在Node中引入模块，需要经历如下3个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("路径分析")]),t._v(" "),a("li",[t._v("文件定位")]),t._v(" "),a("li",[t._v("编译执行")])]),t._v(" "),a("p",[t._v("在node中，模块分为两类：")]),t._v(" "),a("ol",[a("li",[t._v("核心模块：node提供的模块。核心模块部分在node源代码的编译过程中，编译进了二进制执行文件。在node进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中有限判断，所以它的加载速度时最快的。")]),t._v(" "),a("li",[t._v("文件模块：用户编写的模块。文件模块时在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。还有一种特殊的文件模版叫做"),a("code",[t._v("自定义模块")]),t._v("，这类模块的查找是最费时的，因为它是沿路径逐级递归查找node_modules目录")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-1优先从缓存加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1优先从缓存加载"}},[t._v("#")]),t._v(" 2.2.1优先从缓存加载")]),t._v(" "),a("p",[t._v("Node对引入过的模块都会进行缓存，以减少二次引入时的开销。不同与浏览器的是，Node缓存的是编译和执行之后的对象。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-2-路径分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-路径分析"}},[t._v("#")]),t._v(" 2.2.2 路径分析")]),t._v(" "),a("blockquote",[a("p",[t._v("require()方法接受一个标识符作为参数")])]),t._v(" "),a("ol",[a("li",[t._v("模块标识符分类")])]),t._v(" "),a("ul",[a("li",[t._v("核心模块，如"),a("code",[t._v("http、fs、path")])]),t._v(" "),a("li",[t._v(".或..开始的相对路径文件模块")]),t._v(" "),a("li",[t._v("以/开始的绝对路径文件模块")]),t._v(" "),a("li",[t._v("非路径形式的文件模块，也就是"),a("code",[t._v("自定义模块")])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("文件定位")])]),t._v(" "),a("ul",[a("li",[t._v("文件扩展名分析\n"),a("ul",[a("li",[t._v("如果没有提供扩展名，则按照"),a("code",[t._v(".js、.json、.node")]),t._v("补足扩展名，依次尝试")])])]),t._v(" "),a("li",[t._v("目录分析和包\n"),a("ul",[a("li",[t._v("在require分析文件扩展名之后，可能没有找到对应文件，但是得到了一个目录，这在引入自定义模块和逐个模块路径进行查找时会出现，此时node会将目录当作一个包来处理")]),t._v(" "),a("li",[t._v("然后node对当前目录的package.json文件进行"),a("code",[t._v("JSON.parse()")]),t._v("解析，取出"),a("code",[t._v("main")]),t._v("的值对文件进行定位，如果缺少扩展名，则进入扩展名分析步骤")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("main")]),t._v("属性指定的文件名错误，或者没有"),a("code",[t._v("package.json")]),t._v("文件，"),a("code",[t._v("node")]),t._v("会将"),a("code",[t._v("index")]),t._v("当作默认文件名,然后依次查找"),a("code",[t._v("index.js、index.json、index.node")])]),t._v(" "),a("li",[t._v("如果目录分析过程没有找到任何文件，则进入下一个模块路径进行查找。如果模块路径数组都没有查到，则抛出失败的异常。")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-2-3-模块编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-模块编译"}},[t._v("#")]),t._v(" 2.2.3 模块编译")]),t._v(" "),a("p",[t._v("在node中，每个文件模块都是一个对象，它的定义如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filename "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loaded "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对象，然后根据路径载入并编译。不同的扩展名，编译方式不同：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".js")]),t._v("，通过"),a("code",[t._v("fs")]),t._v("模块同步读取文件后编译执行。")]),t._v(" "),a("li",[a("code",[t._v(".node")]),t._v("，这是用"),a("code",[t._v("c/c++")]),t._v("编写的扩展文件，通过"),a("code",[t._v("dlopen()")]),t._v("方法加载最后编译生成的文件。")]),t._v(" "),a("li",[a("code",[t._v(".json")]),t._v("，通过"),a("code",[t._v("fs")]),t._v("模块同步读取后，用"),a("code",[t._v("JSON.parse()")]),t._v("解析返回结果.")]),t._v(" "),a("li",[t._v("其他格式文件，都按照"),a("code",[t._v(".js")]),t._v("文件载入。")])]),t._v(" "),a("p",[t._v("每一个编译成功的模块都会将其文件路径作为索引缓存在"),a("code",[t._v("require.cache")]),t._v("对象上，以提高二次引入的性能")]),t._v(" "),a("p",[t._v("如果想对其他格式文件加载，可以通过扩展"),a("code",[t._v("require.extensions['.ext']")]),t._v("的方式实现。")]),t._v(" "),a("p",[t._v("但是从"),a("code",[t._v("v0.10.6")]),t._v("开始,官方不鼓励通过这种方式来进行加载，而是希望先将其他语言转换成js文件再加载，这样做的好处在于不将繁琐的编译加载等过程引入Node的执行过程中")]),t._v(" "),a("ol",[a("li",[t._v("JS模块的编译\n在"),a("code",[t._v("commonjs")]),t._v("规范中，我们知道每个模块存在"),a("code",[t._v("require、exports、module")]),t._v("三个变量，但是在模块文件中并没有被定义，为了防止污染全局变量，在编译的过程中，node对获取的js文件内容进行了头尾包装，头部添加"),a("code",[t._v("(function (exports, require, module, __filename, __dirname) {\\n")]),t._v(",尾部添加了"),a("code",[t._v("\\n});")]),t._v(",一个正常的js文件会被包装成如下的样子：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("__filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("__dirname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" math "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'math'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("area")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("radius")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这样每个模块之间都进行了作用域隔离。包装之后的代码会被vm原声模块的"),a("code",[t._v("runInThisContext()")]),t._v("方法执行，返回一个具体的"),a("code",[t._v("function")]),t._v("对象，最后，将当前模块对象的"),a("code",[t._v("exports")]),t._v("属性、"),a("code",[t._v("require")]),t._v("方法、"),a("code",[t._v("module（模块对象自身）")]),t._v(",以及在文件定位中得到的完整路径和文件目录作为参数传递给这个"),a("code",[t._v("function()")]),t._v("执行。\n1.1 exports和module.exports"),a("br"),t._v("\n因为exports是通过形参的方式传入的，直接赋值形参会改变形参的引用，但并不能改变作用域外的值，比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("change")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 10")]),t._v("\n")])])]),a("p",[t._v("如果要达到require引入一个类的效果，请赋值给module.exports对象。这个迂回的方案不改变形参的引用。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("C/C++模块的编译")])]),t._v(" "),a("h2",{attrs:{id:"file-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-system"}},[t._v("#")]),t._v(" File System")]),t._v(" "),a("h3",{attrs:{id:"fs-mkdirsync-path-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdirsync-path-options"}},[t._v("#")]),t._v(" fs.mkdirSync(path[, options])")]),t._v(" "),a("p",[t._v("同步地创建目录。 返回 undefined，或创建的第一个目录的路径（如果 recursive 为 true）。 这是 fs.mkdir() 的同步版本。")]),t._v(" "),a("h3",{attrs:{id:"fs-writefilesync-file-data-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-writefilesync-file-data-options"}},[t._v("#")]),t._v(" fs.writeFileSync(file, data[, options])")]),t._v(" "),a("p",[t._v("当 file 是文件名时，则异步地写入数据到文件（如果文件已存在，则覆盖文件）。 data 可以是字符串或 buffer。")]),t._v(" "),a("p",[t._v("当 file 是文件描述符时，则其行为类似于直接调用 fs.write()（建议使用）。 参见以下关于使用文件描述符的说明。")]),t._v(" "),a("p",[t._v("如果 data 是 buffer，则 encoding 选项会被忽略。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const data = new Uint8Array(Buffer.from('Node.js 中文网'));\nfs.writeFile('文件.txt', data, (err) => {\n  if (err) throw err;\n  console.log('文件已被保存');\n});\n")])])]),a("p",[t._v("返回 undefined。")]),t._v(" "),a("h2",{attrs:{id:"modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),a("h3",{attrs:{id:"module-paths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module-paths"}},[t._v("#")]),t._v(" module.paths")]),t._v(" "),a("p",[t._v("模块的搜索路径")]),t._v(" "),a("h2",{attrs:{id:"path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[t._v("#")]),t._v(" Path")]),t._v(" "),a("h3",{attrs:{id:"path-join-paths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-join-paths"}},[t._v("#")]),t._v(" path.join([...paths])")]),t._v(" "),a("p",[t._v("path.join() 方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。\n零长度的 path 片段会被忽略。 如果连接的路径字符串是零长度的字符串，则返回 '.'，表示当前工作目录。")]),t._v(" "),a("h2",{attrs:{id:"process-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-进程"}},[t._v("#")]),t._v(" process(进程)")]),t._v(" "),a("p",[a("code",[t._v("process")]),t._v(" 对象是一个全局变量，提供了有关当前 "),a("code",[t._v("Node.js")]),t._v(" 进程的信息并对其进行控制。 作为全局变量，它始终可供 "),a("code",[t._v("Node.js")]),t._v(" 应用程序使用，无需使用 "),a("code",[t._v("require()")]),t._v("。 它也可以使用"),a("code",[t._v("require()")]),t._v(" 显式地访问：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" process "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'process'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"process-argv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-argv"}},[t._v("#")]),t._v(" process.argv")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<string[]>")])])]),t._v(" "),a("p",[a("code",[t._v("process.argv")]),t._v(" 属性会返回一个数组，其中包含当 "),a("code",[t._v("Node.js")]),t._v(" 进程被启动时传入的命令行参数。 第一个元素是 "),a("code",[t._v("process.execPath")]),t._v("。 第二个元素是正被执行的 "),a("code",[t._v("JavaScript")]),t._v(" 文件的路径。 其余的元素是任何额外的命令行参数。所有参数都为字符串")]),t._v(" "),a("h2",{attrs:{id:"require"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require"}},[t._v("#")]),t._v(" require")]),t._v(" "),a("h3",{attrs:{id:"require-extentions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-extentions"}},[t._v("#")]),t._v(" require.extentions")]),t._v(" "),a("p",[t._v("系统中已有的扩展加载方式，正常情况是"),a("code",[t._v(".js、.json、.node")]),t._v(",得到的结果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{ '.js': [Function], '.json': [Function], '.node': [Function] }\n")])])]),a("h3",{attrs:{id:"require-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-cache"}},[t._v("#")]),t._v(" require.cache")]),t._v(" "),a("p",[t._v("加载模块的缓存路径映射，加速下一次加载")]),t._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("h3",{attrs:{id:"node中启用import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node中启用import"}},[t._v("#")]),t._v(" node中启用import？")]),t._v(" "),a("blockquote",[a("p",[t._v("前置条件: "),a("code",[t._v("node")]),t._v("命令后添加"),a("code",[t._v("--experimental-modules")]),t._v("参数，例如："),a("code",[t._v("node --experimental-modules test.js")])])]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("node v12")]),t._v("中有三种方法：")]),t._v(" "),a("ol",[a("li",[t._v("文件以"),a("code",[t._v(".ejs")]),t._v("结尾")]),t._v(" "),a("li",[t._v("最近的"),a("code",[t._v("package.json")]),t._v("中添加"),a("code",[t._v("'type':'module'")])]),t._v(" "),a("li",[t._v("Strings passed in as an argument to --eval or --print, or piped to node via STDIN, with the flag --input-type=module.")])]),t._v(" "),a("p",[t._v("我使用的是第二种方法")]),t._v(" "),a("h3",{attrs:{id:"当type-module-时-就不能再使用require"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当type-module-时-就不能再使用require"}},[t._v("#")]),t._v(" 当type=‘module’时，就不能再使用require？")]),t._v(" "),a("p",[t._v("可以使用 module.createRequire()替代，更多关于ES Modules 和 CommonJS的用法区别，可以查看：https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs")])])}),[],!1,null,null,null);s.default=n.exports}}]);