(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{479:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("官方文档：https://golang.org/ref/spec")]),t._v(" "),s("h2",{attrs:{id:"学习资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习资源"}},[t._v("#")]),t._v(" 学习资源")]),t._v(" "),s("ol",[s("li",[s("s",[s("a",{attrs:{href:"https://tour.go-zh.org/basics/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("go tour"),s("OutboundLink")],1),t._v(":简单上手，熟悉语法")])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1fD4y1m7TD?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go语言编程快速入门"),s("OutboundLink")],1),t._v("视频教程，适合初学者")]),t._v(" "),s("li",[s("a",{attrs:{href:"http://golang.iswbm.com/en/latest/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go编程时光"),s("OutboundLink")],1),t._v(":学习基础知识（个人博客）")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/unknwon/the-way-to-go_ZH_CN",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go入门指南"),s("OutboundLink")],1),t._v("：正式学习书籍")])]),t._v(" "),s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[t._v("https://golang.org/dl/")]),t._v(" "),s("h2",{attrs:{id:"编辑器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑器"}},[t._v("#")]),t._v(" 编辑器")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("安装vscode插件"),s("code",[t._v("Go")])])]),t._v(" "),s("li",[s("p",[t._v("安装go tools，"),s("code",[t._v("f1>Go:Install/Update Tools")]),t._v(",全选，然后确定，这个需要配置代理，否则会安装报错")])]),t._v(" "),s("li",[s("p",[t._v("使用包，需要初始化"),s("code",[t._v("go mod")]),t._v("，输入指令"),s("code",[t._v("go mod init main")])])]),t._v(" "),s("li",[s("p",[t._v("debug时总是需要按f5来看结果，这很不方便，可以安装插件"),s("code",[t._v("watch-run")]),t._v("，并添加debug task：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// See https://go.microsoft.com/fwlink/?LinkId=733558")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for the documentation about the tasks.json format")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.0.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tasks"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"label"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go debug"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shell"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"command"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go run ${file}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("vscode配置文件添加：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"watch-run.targetList"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"target"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**/*.go"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"task"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"go debug"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"名词解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[t._v("#")]),t._v(" 名词解释")]),t._v(" "),s("h3",{attrs:{id:"类型别名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[t._v("#")]),t._v(" 类型别名")]),t._v(" "),s("p",[t._v("同一个类型的另一个名字，可以自定义类型别名：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("\n")])])]),s("h3",{attrs:{id:"环绕行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环绕行为"}},[t._v("#")]),t._v(" 环绕行为")]),t._v(" "),s("p",[t._v("当值超过该类型最大值时，会从最小值重新开始累计")]),t._v(" "),s("h3",{attrs:{id:"goroutine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#goroutine"}},[t._v("#")]),t._v(" goroutine")]),t._v(" "),s("p",[t._v("独立的任务叫做goroutine。约定：如果代码文档中没有明确说明，那么我们假定这个方法在并发访问的时候是不安全的")]),t._v(" "),s("h3",{attrs:{id:"worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker"}},[t._v("#")]),t._v(" worker")]),t._v(" "),s("p",[t._v("长时间使用的goroutine被称为工作进程，一般使用以下方式达到事件循环的目的")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("commandc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[t._v("#")]),t._v(" 文档")]),t._v(" "),s("h3",{attrs:{id:"type-assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-assertion"}},[t._v("#")]),t._v(" Type Assertion")]),t._v(" "),s("p",[t._v("类型断言，使用方法有两种：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("t:=i.(T)")]),t._v(" 断言一个接口对象i里不是nil,并且接口对象存储的值类型时T，如果断言成功，就会返回值给t，断言失败会触发panic")]),t._v(" "),s("li",[s("code",[t._v("t, ok:= i.(T)")]),t._v("失败不回触发panic，而是ok值为false")])]),t._v(" "),s("h3",{attrs:{id:"errors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#errors"}},[t._v("#")]),t._v(" Errors")]),t._v(" "),s("p",[t._v("自定义错误类型：错误是一个内部的接口，只要包含一个Error() string方法的类都属于该接口。错误类型约定应以"),s("code",[t._v("Error")]),t._v("结尾")]),t._v(" "),s("p",[t._v("声明变量为错误时，约定以"),s("code",[t._v("Err")]),t._v("开头")]),t._v(" "),s("p",[t._v("panic比os.Exit更好，panic后会执行所有defer的动作，而Exit不会")]),t._v(" "),s("p",[t._v("在defer函数中调用recover可以防止panic，程序正常执行。")]),t._v(" "),s("h3",{attrs:{id:"statements-声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statements-声明"}},[t._v("#")]),t._v(" Statements（声明）")]),t._v(" "),s("h4",{attrs:{id:"defer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defer"}},[t._v("#")]),t._v(" Defer")]),t._v(" "),s("p",[t._v("延迟处理，所有deferred的动作可以在函数返回前执行。")]),t._v(" "),s("h4",{attrs:{id:"go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[t._v("#")]),t._v(" go")]),t._v(" "),s("p",[t._v("启动goroutine,只需要再调用前面加一个go关键字")]),t._v(" "),s("p",[t._v("计算机处理器会使用“分时”技术，再多个goroutine上轮流花费时间")]),t._v(" "),s("p",[t._v("在使用goroutine时，各个goroutine的执行顺序无法确定")]),t._v(" "),s("p",[t._v("即使已经停止等待goroutine，但只要main函数还没返回，仍在运行的goroutine将会继续占用内存。")]),t._v(" "),s("h4",{attrs:{id:"select"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" select")]),t._v(" "),s("p",[t._v("与switch类似，哪个chanl先返回哪个先执行。")]),t._v(" "),s("p",[t._v("不包含任何case的情况下，将永远等下去。")]),t._v(" "),s("h3",{attrs:{id:"词汇元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词汇元素"}},[t._v("#")]),t._v(" 词汇元素")]),t._v(" "),s("h4",{attrs:{id:"rune-literals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rune-literals"}},[t._v("#")]),t._v(" Rune literals")]),t._v(" "),s("p",[t._v("字符用单引号表示"),s("code",[t._v("''")])]),t._v(" "),s("h3",{attrs:{id:"declarations-and-scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#declarations-and-scope"}},[t._v("#")]),t._v(" Declarations and scope")]),t._v(" "),s("h4",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" type")]),t._v(" "),s("p",[t._v("type可以声明一个新的类型，使用新类型可以提高代码可读性和可靠性，值得注意的是，尽管新的类型基于旧类型，但是这两个类型无法混用。")]),t._v(" "),s("p",[t._v("通过添加方法可以为新类型添加行为")]),t._v(" "),s("h3",{attrs:{id:"package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package"}},[t._v("#")]),t._v(" package")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("包名与导入路径的最后一个元素一致。例如，"),s("code",[t._v('"math/rand"')]),t._v(" 包中的源码均以 "),s("code",[t._v("package rand")]),t._v(" 语句开始")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My favorite number is"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Intn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在 Go 中，如果一个名字以大写字母开头，那么它就是已导出的。在导入一个包时，你只能引用其中已导出的名字。任何“未导出”的名字在该包外均无法访问。")])])]),t._v(" "),s("h3",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("p",[t._v("函数的零值为"),s("code",[t._v("nil")])]),t._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("p",[t._v("函数需要为参数添加类型，如果多个类型值一致，那么可以省略除了最后一个参数的类型声明")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("x "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\nx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n")])])]),s("p",[t._v("多个参数使用"),s("code",[t._v("...")]),t._v("表示，例如："),s("code",[t._v("main(a...int)")])]),t._v(" "),s("p",[t._v("函数的参数总是传递参数的副本")]),t._v(" "),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),s("p",[t._v("函数可以返回任意数量的返回值")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("命名返回值： "),s("code",[t._v("return")]),t._v("空时， 返回已命名的返回值。也就是 "),s("code",[t._v("直接")]),t._v(" 返回。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n\ty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"方法关联类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法关联类型"}},[t._v("#")]),t._v(" 方法关联类型")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" test "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("celsius")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此处的k称为接收者，每个方法只能有一个接收者,接收者传入类型为test类型，方法调用方式：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("celsius")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test也可以为test类型的变量")]),t._v("\n")])])]),s("p",[t._v("celsius方法接收到的参数第一个为接收者k，剩下的为函数声明参数")]),t._v(" "),s("h4",{attrs:{id:"方法的转发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法的转发"}},[t._v("#")]),t._v(" 方法的转发")]),t._v(" "),s("p",[t._v("还可以在方法中调用接收者中的字段的方法")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("average")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" celsius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("high"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r report"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("average")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" celsius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("average")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用report类型中temp字段的方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这种写法比较繁琐，可以使用struct的嵌入，类型自动关联字段的方法")]),t._v(" "),s("h4",{attrs:{id:"方法的接收者与指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法的接收者与指针"}},[t._v("#")]),t._v(" 方法的接收者与指针")]),t._v(" "),s("p",[t._v("方法的接收者处理指针是与函数的参数基本类似的，会解引用，但是接收类型要为指针类型。如果有一个方法接收指针类型，那么其他方法也应该如此")]),t._v(" "),s("h3",{attrs:{id:"基本类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("变量使用var定义，可以出现在包或者函数级别")])]),t._v(" "),s("li",[s("p",[t._v("同时声明多个变量时，如果类型相同，可以只给最后一个变量添加类型定义")])]),t._v(" "),s("li",[s("p",[t._v("初始化，初始化时有值的情况可以省略类型定义")])]),t._v(" "),s("li",[s("p",[t._v("短变量声明，在"),s("strong",[t._v("函数")]),t._v("中，简洁赋值语句，"),s("code",[t._v(":=")]),t._v("可在类型明确的地方代替"),s("code",[t._v("var")]),t._v("声明")])]),t._v(" "),s("li",[s("p",[t._v("函数外的每个语句都必须以关键字开始，"),s("code",[t._v("var,func")]),t._v("等等")])]),t._v(" "),s("li",[s("p",[t._v("变量声明也可以像导入语句一样分组成一个语法块")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tToBe   "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\tMaxInt "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\tz      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex128")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmplx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sqrt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("类型转换：表达式 "),s("code",[t._v("T(v)")]),t._v(" 将值 "),s("code",[t._v("v")]),t._v(" 转换为类型 "),s("code",[t._v("T")]),t._v("。Go 在不同类型的项之间赋值时需要显式转换")])]),t._v(" "),s("li",[s("p",[t._v("值为单引号和双引号的区别，单引号为一个字符，惯上用它来区别字符值和整数值，双引号表示字符串字面量，支持转义，不想转义使用反引号`")])])]),t._v(" "),s("h4",{attrs:{id:"整数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数"}},[t._v("#")]),t._v(" 整数")]),t._v(" "),s("ol",[s("li",[t._v("int，int和uint都是与架构有关的")]),t._v(" "),s("li",[t._v("uint,无符号整数类型")]),t._v(" "),s("li",[t._v("unit8,可以用来表示css颜色，因为取值范围相同（0-255）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-pic.oss-cn-beijing.aliyuncs.com/image-20210630161106786.png",alt:"image-20210630161106786"}})]),t._v(" "),s("h4",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("const")]),t._v("声明，不能使用"),s("code",[t._v(":=")]),t._v("声明。常量可以是字符、字符串、布尔值或数值,甚至也可以没有类型(untyped)")]),t._v(" "),s("p",[t._v("常量不能修改")]),t._v(" "),s("h4",{attrs:{id:"零值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零值"}},[t._v("#")]),t._v(" 零值")]),t._v(" "),s("p",[t._v("没有明确初始值的变量声明会被赋予他们的零值。零值是：")]),t._v(" "),s("ul",[s("li",[t._v("数值类型为 "),s("code",[t._v("0")]),t._v("，")]),t._v(" "),s("li",[t._v("布尔类型为 "),s("code",[t._v("false")]),t._v("，")]),t._v(" "),s("li",[t._v("字符串为 "),s("code",[t._v('""')]),t._v("（空字符串）。")])]),t._v(" "),s("h4",{attrs:{id:"int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" int")]),t._v(" "),s("p",[s("code",[t._v("int")]),t._v(", "),s("code",[t._v("uint")]),t._v(" 和 "),s("code",[t._v("uintptr")]),t._v(" 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。 当你需要一个整数值时应使用 "),s("code",[t._v("int")]),t._v(" 类型，除非你有特殊的理由使用固定大小或无符号的整数类型。")]),t._v(" "),s("h4",{attrs:{id:"int32"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int32"}},[t._v("#")]),t._v(" int32")]),t._v(" "),s("p",[t._v("int32的类型别名为"),s("code",[t._v("rune")])]),t._v(" "),s("h4",{attrs:{id:"uint8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uint8"}},[t._v("#")]),t._v(" uint8")]),t._v(" "),s("p",[t._v("uint8的别名是"),s("code",[t._v("byte")]),t._v(",目的是用于二进制数据")]),t._v(" "),s("h3",{attrs:{id:"boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" boolean")]),t._v(" "),s("p",[t._v("布尔值只有true和false")]),t._v(" "),s("h3",{attrs:{id:"float"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#float"}},[t._v("#")]),t._v(" float")]),t._v(" "),s("p",[t._v("浮点类型可以表达的值大于uint64最大值")]),t._v(" "),s("h3",{attrs:{id:"其他类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他类型"}},[t._v("#")]),t._v(" 其他类型")]),t._v(" "),s("h4",{attrs:{id:"big"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#big"}},[t._v("#")]),t._v(" Big")]),t._v(" "),s("p",[t._v("一旦使用了big.int，那么等式里其他部分也必须使用"),s("code",[t._v("big.int")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("big"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12312311231232113123123'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("无类型数字常量是由big来处理")]),t._v(" "),s("h4",{attrs:{id:"结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),s("p",[t._v("类似于ts中的"),s("code",[t._v("interface")]),t._v("，结构体中的属性称为结构体字段")]),t._v(" "),s("h4",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("数组长度由创建时定义，不可再改变。")]),t._v(" "),s("p",[t._v("使用复合字面值初始化数组："),s("code",[t._v('dwarfs :=[5]string{"dfs","dfs","dfs","dfs","dfs"}')]),t._v(",还可以使用"),s("code",[t._v("...")]),t._v("作为数组的长度，go编译器会为你算出数组的元素数量"),s("code",[t._v('dwarfs :=[...]string{"dfs","dfs","dfs","dfs","dfs"}')])]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("len(arr)")]),t._v("可以查看数组的长度，使用"),s("code",[t._v("cap(arr)")]),t._v("可以查看数组的容量,数组的零值为"),s("code",[t._v("nil")])]),t._v(" "),s("p",[t._v("数组赋值给新的变量或者传递给函数时都会产生一个新的数组副本，所以性能会比较低，一般使用切片作为参数而不是数组。")]),t._v(" "),s("p",[s("strong",[t._v("切片")])]),t._v(" "),s("p",[t._v("数组支持切片操作，切片只是对引用的描述，修改值会影响原数组，以下切片写法是等价的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a[0:10]\na[:10]\na[0:]\na[:]\n")])])]),s("p",[t._v("切片的默认值是"),s("code",[t._v("nil")])]),t._v(" "),s("p",[t._v("切片的索引不能是负数")]),t._v(" "),s("p",[t._v("切片添加值使用"),s("code",[t._v("append")])]),t._v(" "),s("p",[t._v("切片操作也可以用于字符串")]),t._v(" "),s("p",[t._v("使用3索引可以限制切片的容量，例如："),s("code",[t._v("ter:=planets[0:4:4]")])]),t._v(" "),s("p",[t._v("可以单独声明slice:"),s("code",[t._v('dwarfs :=[]string{"test","test","test","test"}')]),t._v(",也就是没有长度的数组形式。")]),t._v(" "),s("blockquote",[s("p",[t._v("文章："),s("a",{attrs:{href:"https://blog.go-zh.org/go-slices-usage-and-internals",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 切片：用法和本质"),s("OutboundLink")],1)])]),t._v(" "),s("h4",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map")]),t._v(" "),s("p",[t._v("map默认值为"),s("code",[t._v("nil")]),t._v(", map声明"),s("code",[t._v("map[string]int")]),t._v(",这里的string表示key的类型，而int表示值的类型。访问key只能通过"),s("code",[t._v("[]")]),t._v(",在访问map中的key时，如果不确定是否有值，那么可以通过返回值的第二个值进行判断：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("moon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" moon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ok"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("moon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"存在"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"不存在"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"struct"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#struct"}},[t._v("#")]),t._v(" struct")]),t._v(" "),s("p",[t._v("结构体，类似于class,不是引用类型。访问字段使用"),s("code",[t._v(".")]),t._v("，声明结构体变量")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" curiosity "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("声明struct类型")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" location "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通过复合字面值初始化struct")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键值对形式可以不按照顺序赋值")]),t._v("\ntest"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照结构体字段顺序赋值")]),t._v("\n")])])]),s("p",[t._v("转换成json，默认只转换出大写开头的，如果想要自定义，那么需要在后边加上额外内容：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" location "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Lat "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('`json:"latitude"xml:"latitude"`')]),t._v("\n  Long "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('`json:"longitude"`')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("约定，如果方法以"),s("code",[t._v("new")]),t._v("开头，后边是结构体，那么通常是用来构造数据的，例如"),s("code",[t._v("newPerson")])]),t._v(" "),s("p",[s("strong",[t._v("嵌入")])]),t._v(" "),s("p",[t._v("struct中通过组合的方式拆分关联度比较高的字段成为一个新类型：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" location "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  style style\n  color unit8\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" style "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  width "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  height "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("还有一种简写的写法，叫做嵌入：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" location "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  style\n  color unit8\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" style "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  width "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n  height "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("使用嵌入的写法会将组合字段的方法加入struct，比如style 有个"),s("code",[t._v("calculation")]),t._v("方法，这个时候location也可以直接使用："),s("code",[t._v("location.calculation()")]),t._v("，还可以直接使用字段"),s("code",[t._v("location.width")]),t._v(",这种行为称为转发。")]),t._v(" "),s("p",[t._v("当命名冲突时，不能使用这种简写，还是要使用"),s("code",[t._v("location.style.width")]),t._v(",当最外层struct中有同名方法时，则程序会优先使用该方法。")]),t._v(" "),s("h4",{attrs:{id:"interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[t._v("#")]),t._v(" interface")]),t._v(" "),s("p",[t._v("声明为接口类型的变量默认值为"),s("code",[t._v("nil")]),t._v(",接口类型的变量只有在类型和值都为nil时才 等于"),s("code",[t._v("nil")])]),t._v(" "),s("p",[t._v("接口关注与类型可以做什么，而不是储存了什么。")]),t._v(" "),s("p",[t._v("接口通过列举类型必须满足的一组方法来进行声明。")]),t._v(" "),s("p",[t._v("不需要显示声明接口。")]),t._v(" "),s("p",[t._v("通常声明interface类型的时候习惯使用"),s("code",[t._v("er")]),t._v("结尾")]),t._v(" "),s("h4",{attrs:{id:"指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),s("p",[t._v("为什么要用指针？")]),t._v(" "),s("ol",[s("li",[t._v("指针可以帮助函数在内部修改外部变量的值，还可以帮助我们在任何地方修改其指向数据的值。")]),t._v(" "),s("li",[t._v("传递指针参数可以节省拷贝大结构体的内存开销")])]),t._v(" "),s("p",[t._v("通过&操作符可以获取变量的内存地址。")]),t._v(" "),s("p",[s("strong",[t._v("内部指针")]),t._v("："),s("code",[t._v("&")]),t._v("不仅可以获得结构体的内存地址，还可以获得其中字段的内存地址。")]),t._v(" "),s("p",[s("code",[t._v("*")]),t._v("放在类型前面表示指针类型，指针不能直接赋值给其他类型，只能赋值给"),s("code",[t._v("*type")])]),t._v(" "),s("p",[s("code",[t._v("*")]),t._v("放在变量前面表示解引用,只能用在值为指针类型的变量上,或者复合字面量："),s("code",[t._v('timmy:=&person{name:"Timothy",age:10}')]),t._v(",访问字段时，对结构体进行解引用不是必须的。数组在执行索引或切片操作时会自动解引用。slice和map的复合字面值没有自动解引用的功能。")]),t._v(" "),s("p",[s("strong",[t._v("隐式指针")]),t._v("：go语言里有一些内置的集合类型就在暗中使用指针。map在被赋值或者作为参数传递的时候不回被复制。")]),t._v(" "),s("p",[t._v("对"),s("code",[t._v("nil")]),t._v("解引用会引起程序恐慌，导致报错")]),t._v(" "),s("blockquote",[s("p",[t._v("文章："),s("a",{attrs:{href:"https://studygolang.com/articles/32103",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么时候使用指针？"),s("OutboundLink")],1)])]),t._v(" "),s("h4",{attrs:{id:"channel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[t._v("#")]),t._v(" Channel")]),t._v(" "),s("p",[t._v("通道可以在多个goroutine之间安全的传值")]),t._v(" "),s("p",[t._v("通道可以用作变量、函数参数、结构体字段等等")]),t._v(" "),s("p",[t._v("创建通道用make函数"),s("code",[t._v("c:=make(chan int)")]),t._v("。不使用make初始化通道，那么通道变量的值就是nil。对nil通道进行发送或接收不回引起panic，但会导致永久阻塞。对nil通道执行close函数，那么会引起panic。")]),t._v(" "),s("p",[t._v("向通道发送或者接收值使用"),s("code",[t._v("<-")]),t._v("符号，发送值例子："),s("code",[t._v("c<-99")]),t._v("，从通道接收值例子："),s("code",[t._v("r:=<-c")])]),t._v(" "),s("p",[t._v("接收或者发送值到通道时会阻塞运行。")]),t._v(" "),s("h3",{attrs:{id:"流程控制语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程控制语句"}},[t._v("#")]),t._v(" 流程控制语句")]),t._v(" "),s("h4",{attrs:{id:"for循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[t._v("#")]),t._v(" for循环")]),t._v(" "),s("p",[t._v("Go只有一种循环结构：for循环。")]),t._v(" "),s("p",[t._v("基本的 "),s("code",[t._v("for")]),t._v(" 循环由三部分组成，它们用分号隔开：")]),t._v(" "),s("ul",[s("li",[t._v("初始化语句：在第一次迭代前执行,可选")]),t._v(" "),s("li",[t._v("条件表达式：在每次迭代前求值")]),t._v(" "),s("li",[t._v("后置语句：在每次迭代的结尾执行，可选")])]),t._v(" "),s("p",[t._v("还可以省略掉"),s("code",[t._v(";")]),t._v("，只使用for，当 作"),s("code",[t._v("while")]),t._v("使用：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tsum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" sum\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("数组和字符串遍历都可以使用："),s("code",[t._v("for i := range arr")]),t._v("。")]),t._v(" "),s("p",[t._v("range还可以用来遍历chanl，直到通道关闭位置")]),t._v(" "),s("h4",{attrs:{id:"if语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if语句"}},[t._v("#")]),t._v(" if语句")]),t._v(" "),s("p",[s("code",[t._v("if")]),t._v("支持简短语句，在表达式之前执行一个简单的语句，该语句声明的变量作用域仅在"),s("code",[t._v("if")]),t._v("之内,或者else。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lim "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lim "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lim\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"switch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[t._v("#")]),t._v(" switch")]),t._v(" "),s("p",[t._v("只运行选定的case，不需要break，除非以 "),s("code",[t._v("fallthrough")]),t._v(" 语句结束，否则分支会自动终止。case 无需为常量，且取值不必为整数。")]),t._v(" "),s("p",[s("code",[t._v("switch")]),t._v("可以没有条件，同switch true一样")]),t._v(" "),s("h4",{attrs:{id:"defer-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defer-2"}},[t._v("#")]),t._v(" defer")]),t._v(" "),s("p",[t._v("defer 语句会将函数推迟到外层函数返回之后执行。")]),t._v(" "),s("p",[t._v("推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。")]),t._v(" "),s("h3",{attrs:{id:"结构体-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体-2"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),s("p",[t._v("类似于js中的class，结构体字段使用点号来访问：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Vertex "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tX "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tY "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Vertex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"内置函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置函数"}},[t._v("#")]),t._v(" 内置函数")]),t._v(" "),s("p",[t._v("内置函数不需要"),s("code",[t._v("import")])]),t._v(" "),s("h4",{attrs:{id:"len"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#len"}},[t._v("#")]),t._v(" len")]),t._v(" "),s("p",[t._v("查看字符串字节长度")]),t._v(" "),s("h4",{attrs:{id:"cap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cap"}},[t._v("#")]),t._v(" cap")]),t._v(" "),s("p",[t._v("查看切片容量，如果append后超过原容量，那么会产生一个新数组，容量为之前容量的2倍")]),t._v(" "),s("h4",{attrs:{id:"append"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#append"}},[t._v("#")]),t._v(" append")]),t._v(" "),s("p",[t._v("操作slice,")]),t._v(" "),s("h4",{attrs:{id:"delete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" delete")]),t._v(" "),s("p",[t._v("删除map中的key")]),t._v(" "),s("h4",{attrs:{id:"make"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#make"}},[t._v("#")]),t._v(" make")]),t._v(" "),s("p",[t._v("动态创建切片、map、channel")]),t._v(" "),s("h4",{attrs:{id:"close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#close"}},[t._v("#")]),t._v(" Close")]),t._v(" "),s("p",[t._v("关闭chanl")]),t._v(" "),s("h2",{attrs:{id:"package-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package-2"}},[t._v("#")]),t._v(" package")]),t._v(" "),s("p",[t._v("大写字母开头的函数、变量或其他标识符都会被导出。小写字母开头的就不行")]),t._v(" "),s("h3",{attrs:{id:"strconv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strconv"}},[t._v("#")]),t._v(" strconv")]),t._v(" "),s("p",[t._v("实现转换相关功能")]),t._v(" "),s("h3",{attrs:{id:"fmt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fmt"}},[t._v("#")]),t._v(" fmt")]),t._v(" "),s("div",{staticClass:"language-###go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('printf("%c",a)；输出单个字符。\n\nprintf("%d",a)；输出十进制整数。\n\nprintf("%f",a)；输出十进制浮点数.\n\nprintf("%o",a)；输出八进制数。\n\nprintf("%s",a)；输出字符串。\n\nprintf("%u",a)；输出无符号十进制数。\n\nprintf("%x",a)；输出十六进制数。\n\nPrintf("%v", a)；输入a的值\nPrintf("%+v", a)；输入a的声明值，包含key\n\nPrintf("%T", a)；输入a的类型\n')])])]),s("h3",{attrs:{id:"unicode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unicode"}},[t._v("#")]),t._v(" unicode")]),t._v(" "),s("h4",{attrs:{id:"utf8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#utf8"}},[t._v("#")]),t._v(" utf8")]),t._v(" "),s("p",[s("code",[t._v("utf8.RuneCountInString")]),t._v("可以用来查看字符串中字符个数")]),t._v(" "),s("h4",{attrs:{id:"math"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[t._v("#")]),t._v(" math")]),t._v(" "),s("p",[t._v("math."),s("a",{attrs:{href:"https://golang.org/src/math/floor.go?s=933:962#L38",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trunc"),s("OutboundLink")],1),t._v(" 返回float64的整数值")]),t._v(" "),s("h3",{attrs:{id:"encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#encoding"}},[t._v("#")]),t._v(" encoding")]),t._v(" "),s("h4",{attrs:{id:"json-marshal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json-marshal"}},[t._v("#")]),t._v(" json.Marshal")]),t._v(" "),s("p",[t._v("把任何类型转换为byte类型")]),t._v(" "),s("h3",{attrs:{id:"io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[t._v("#")]),t._v(" io")]),t._v(" "),s("h4",{attrs:{id:"ioutil-readdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioutil-readdir"}},[t._v("#")]),t._v(" ioutil.ReadDir")]),t._v(" "),s("p",[t._v("读取当前目录")]),t._v(" "),s("h3",{attrs:{id:"os"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#os"}},[t._v("#")]),t._v(" os")]),t._v(" "),s("h4",{attrs:{id:"create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create"}},[t._v("#")]),t._v(" Create")]),t._v(" "),s("p",[t._v("创建文件")]),t._v(" "),s("h3",{attrs:{id:"sync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sync"}},[t._v("#")]),t._v(" sync")]),t._v(" "),s("h4",{attrs:{id:"mutex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutex"}},[t._v("#")]),t._v(" mutex")]),t._v(" "),s("p",[t._v("互斥锁,定义在被保护的变量之上，一个已经被锁定的goroutine再次被锁定则会引发死锁。")]),t._v(" "),s("h2",{attrs:{id:"最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[t._v("#")]),t._v(" 最佳实践")]),t._v(" "),s("h3",{attrs:{id:"浮点类型计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点类型计算"}},[t._v("#")]),t._v(" 浮点类型计算")]),t._v(" "),s("p",[t._v("未了尽量最小化舍入错误，尽量先做乘法，再做除法")]),t._v(" "),s("h3",{attrs:{id:"时间变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间变量类型"}},[t._v("#")]),t._v(" 时间变量类型")]),t._v(" "),s("p",[t._v("应该使用int64或者uint64,因为到2038年就会超过int32的最大数。")]),t._v(" "),s("h3",{attrs:{id:"函数参数为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数为数组"}},[t._v("#")]),t._v(" 函数参数为数组")]),t._v(" "),s("p",[t._v("尽量使用切片而不是数组，这样性能会好点。")]),t._v(" "),s("h3",{attrs:{id:"函数变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数变量"}},[t._v("#")]),t._v(" 函数变量")]),t._v(" "),s("p",[t._v("检查函数值是否为"),s("code",[t._v("nil")]),t._v(",并在有需要时提供默认行为")]),t._v(" "),s("h3",{attrs:{id:"错误处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),s("p",[t._v("减少错误处理代码的一种策略时：将易错的代码和不会出错的代码隔离开")]),t._v(" "),s("h2",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),s("h3",{attrs:{id:"如何判断数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断数据类型"}},[t._v("#")]),t._v(" 如何判断数据类型？")]),t._v(" "),s("ol",[s("li",[t._v("在业务代码中使用"),s("code",[t._v("reflect.TypeOf(xxx)")])]),t._v(" "),s("li",[t._v("在print中使用"),s("code",[t._v('fmt.Printf("%T", p)')])])]),t._v(" "),s("h3",{attrs:{id:"如何把字符转换成int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何把字符转换成int"}},[t._v("#")]),t._v(" 如何把字符转换成int？")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"数字转换成字符串乱码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字转换成字符串乱码"}},[t._v("#")]),t._v(" 数字转换成字符串乱码？")]),t._v(" "),s("p",[t._v("这个数字超出了code point范围")]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/75373075",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go语言设计和工具链核心团队成员介绍"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);