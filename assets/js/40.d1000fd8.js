(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{310:function(t,r,a){"use strict";a.r(r);var e=a(1),s=Object(e.a)({},function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("标题参考"),a("a",{attrs:{href:"https://roadmap.sh/frontend",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端技能路线系列"),a("OutboundLink")],1),a("br"),t._v("\n副标题参考 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),a("OutboundLink")],1),a("br"),t._v("\n文章内容来源 "),a("a",{attrs:{href:"https://juejin.im/post/5dafa3d35188257b1549bad1#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("表现"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 规范")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://drafts.csswg.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSSWG"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("CSS Working Group Editor Drafts 承担主要的 CSS 规范开发工作")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("a",{attrs:{href:"https://drafts.fxtf.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("FX Task Force"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("FX Task Force Editor Drafts 主要是一些图形图像方面的规范，比如遮罩、滤镜")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("a",{attrs:{href:"https://drafts.css-houdini.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Houdini"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("CSS 新方向，浏览器暴露出更多 API，使 CSS 可以控制更多底层的东西，目前主要是 Chrome 团队在主导。")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("a",{attrs:{href:"https://www.w3.org/Style/CSS/",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3c css"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("caniuse"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote"),t._v(" "),a("h2",{attrs:{id:"伪类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪类","aria-hidden":"true"}},[t._v("#")]),t._v(" 伪类")]),t._v(" "),a("p",[t._v("伪类用于在页面中的元素处于某个状态时，为其添加指定的样式。"),a("br"),t._v("\n最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。")]),t._v(" "),a("p",[a("a",{attrs:{href:"#%E5%8C%BA%E5%88%86%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0%EF%BC%9F"}},[t._v("区分伪类和伪元素？")])]),t._v(" "),a("h2",{attrs:{id:"伪元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 伪元素")]),t._v(" "),a("p",[t._v("伪元素会创建一个抽象的伪元素，这个元素不是DOM中的真实元素，但是会存在于最终的渲染树中，我们可以为其添加样式。"),a("br"),t._v("\n伪元素可以分为排版伪元素、突出显示伪元素、树中伪元素三类")]),t._v(" "),a("h3",{attrs:{id:"排版伪元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排版伪元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 排版伪元素")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("::first-line")]),t._v("伪元素")]),t._v(" "),a("li",[a("code",[t._v("::first-letter")]),t._v("伪元素")])]),t._v(" "),a("h3",{attrs:{id:"突出显示伪元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#突出显示伪元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 突出显示伪元素")]),t._v(" "),a("p",[t._v("突出显示伪元素表示文档中特定状态的部分，通常采用不同的样式展示该状态。如页面内容的选中。"),a("br"),t._v("\n突出显示伪元素不需要在元素树中有体现，并且可以任意跨越元素边界而不考虑其嵌套结构。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("::selection")]),t._v("与"),a("code",[t._v("::inactive-selection")])])]),t._v(" "),a("h3",{attrs:{id:"树中伪元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树中伪元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 树中伪元素")]),t._v(" "),a("p",[t._v("这类伪元素会一直存在于元素树中，它们汇集成源元素的任何属性。")]),t._v(" "),a("ol",[a("li",[t._v("内容生成伪元素："),a("code",[t._v("::before/::after")])]),t._v(" "),a("li",[t._v("列表项标记伪元素（只有safari支持）："),a("code",[t._v("::marker")])]),t._v(" "),a("li",[t._v("输入框占位伪元素："),a("code",[t._v("::placeholder")])])]),t._v(" "),a("h2",{attrs:{id:"line-height"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#line-height","aria-hidden":"true"}},[t._v("#")]),t._v(" line-height")]),t._v(" "),a("p",[t._v("line-heihgt取值的区别（100%、1em、1）：")]),t._v(" "),a("ol",[a("li",[t._v("百分比和em根据当前元素font-size进行计算")]),t._v(" "),a("li",[t._v("值为数字时，根据子元素的font-size进行计算")])]),t._v(" "),a("h2",{attrs:{id:"grid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grid","aria-hidden":"true"}},[t._v("#")]),t._v(" Grid")]),t._v(" "),a("blockquote",[a("p",[t._v("注意，设为网格布局以后，容器子元素（项目）的flot、display:inline-block、display:table-cell、vertical-align和column-*等设置都将失效。")])]),t._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("h3",{attrs:{id:"元素全屏后，弹窗元素不能显示？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素全屏后，弹窗元素不能显示？","aria-hidden":"true"}},[t._v("#")]),t._v(" 元素全屏后，弹窗元素不能显示？")]),t._v(" "),a("ul",[a("li",[t._v("原因："),a("br"),t._v("\n使用elementUI时"),a("code",[t._v("notify")]),t._v("组件无法在全屏中显示出来，因为notify渲染在body下，全屏元素不与notify在同一层级下，如果notify组件为全屏元素的子元素，那么就会正常显示了。")]),t._v(" "),a("li",[t._v("解决思路：\n"),a("ul",[a("li",[t._v("把弹窗元素移到全屏元素下。")]),t._v(" "),a("li",[t._v("把body全屏，把之前的全屏元素设置为：")])])])]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".fullscreen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("position")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fixed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("bottom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" black"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"区分伪类和伪元素？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区分伪类和伪元素？","aria-hidden":"true"}},[t._v("#")]),t._v(" 区分伪类和伪元素？")]),t._v(" "),a("ul",[a("li",[t._v("最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。")]),t._v(" "),a("li",[t._v("可以通过"),a("code",[t._v(":")]),t._v("和"),a("code",[t._v("::")]),t._v("来区分，，"),a("code",[t._v(":")]),t._v("表示伪类，"),a("code",[t._v("::")]),t._v("表示伪元素")]),t._v(" "),a("li",[t._v("伪元素与伪类的根本区别在于：操作的对象元素是否存在于原来的dom结构里。")])]),t._v(" "),a("p",[t._v("::before伪类搭配vertical-align:middle实现垂直居中的原理？")]),t._v(" "),a("ul",[a("li",[t._v("https://segmentfault.com/a/1190000020646920")])])])},[],!1,null,null,null);r.default=s.exports}}]);